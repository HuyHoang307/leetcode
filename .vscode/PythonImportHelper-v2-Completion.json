[
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "heapq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "heapq",
        "description": "heapq",
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappop",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "heappush",
        "importPath": "heapq",
        "description": "heapq",
        "isExtraImport": true,
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "101.symmetric-tree.101.symmetric-tree",
        "description": "101.symmetric-tree.101.symmetric-tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\nclass Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        def isMirror(left: TreeNode, right: TreeNode) -> bool:\n            if not left and not right:\n                return True",
        "detail": "101.symmetric-tree.101.symmetric-tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "101.symmetric-tree.101.symmetric-tree",
        "description": "101.symmetric-tree.101.symmetric-tree",
        "peekOfCode": "class Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        def isMirror(left: TreeNode, right: TreeNode) -> bool:\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        if not root:\n            return True",
        "detail": "101.symmetric-tree.101.symmetric-tree",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "101.symmetric-tree.101.symmetric-tree",
        "description": "101.symmetric-tree.101.symmetric-tree",
        "peekOfCode": "root = TreeNode(1)\nar = TreeNode(2)\nal = TreeNode(2)\nbl = TreeNode(3)\nbr = TreeNode(3)\ncl = TreeNode(4)\ncr = TreeNode(4)\nroot.left = al\nroot.right = ar\nal.left = bl",
        "detail": "101.symmetric-tree.101.symmetric-tree",
        "documentation": {}
    },
    {
        "label": "ar",
        "kind": 5,
        "importPath": "101.symmetric-tree.101.symmetric-tree",
        "description": "101.symmetric-tree.101.symmetric-tree",
        "peekOfCode": "ar = TreeNode(2)\nal = TreeNode(2)\nbl = TreeNode(3)\nbr = TreeNode(3)\ncl = TreeNode(4)\ncr = TreeNode(4)\nroot.left = al\nroot.right = ar\nal.left = bl\nal.right = cl",
        "detail": "101.symmetric-tree.101.symmetric-tree",
        "documentation": {}
    },
    {
        "label": "al",
        "kind": 5,
        "importPath": "101.symmetric-tree.101.symmetric-tree",
        "description": "101.symmetric-tree.101.symmetric-tree",
        "peekOfCode": "al = TreeNode(2)\nbl = TreeNode(3)\nbr = TreeNode(3)\ncl = TreeNode(4)\ncr = TreeNode(4)\nroot.left = al\nroot.right = ar\nal.left = bl\nal.right = cl\nar.right = br",
        "detail": "101.symmetric-tree.101.symmetric-tree",
        "documentation": {}
    },
    {
        "label": "bl",
        "kind": 5,
        "importPath": "101.symmetric-tree.101.symmetric-tree",
        "description": "101.symmetric-tree.101.symmetric-tree",
        "peekOfCode": "bl = TreeNode(3)\nbr = TreeNode(3)\ncl = TreeNode(4)\ncr = TreeNode(4)\nroot.left = al\nroot.right = ar\nal.left = bl\nal.right = cl\nar.right = br\nar.left = cr",
        "detail": "101.symmetric-tree.101.symmetric-tree",
        "documentation": {}
    },
    {
        "label": "br",
        "kind": 5,
        "importPath": "101.symmetric-tree.101.symmetric-tree",
        "description": "101.symmetric-tree.101.symmetric-tree",
        "peekOfCode": "br = TreeNode(3)\ncl = TreeNode(4)\ncr = TreeNode(4)\nroot.left = al\nroot.right = ar\nal.left = bl\nal.right = cl\nar.right = br\nar.left = cr\ns = Solution()",
        "detail": "101.symmetric-tree.101.symmetric-tree",
        "documentation": {}
    },
    {
        "label": "cl",
        "kind": 5,
        "importPath": "101.symmetric-tree.101.symmetric-tree",
        "description": "101.symmetric-tree.101.symmetric-tree",
        "peekOfCode": "cl = TreeNode(4)\ncr = TreeNode(4)\nroot.left = al\nroot.right = ar\nal.left = bl\nal.right = cl\nar.right = br\nar.left = cr\ns = Solution()\nprint(s.isSymmetric(root))",
        "detail": "101.symmetric-tree.101.symmetric-tree",
        "documentation": {}
    },
    {
        "label": "cr",
        "kind": 5,
        "importPath": "101.symmetric-tree.101.symmetric-tree",
        "description": "101.symmetric-tree.101.symmetric-tree",
        "peekOfCode": "cr = TreeNode(4)\nroot.left = al\nroot.right = ar\nal.left = bl\nal.right = cl\nar.right = br\nar.left = cr\ns = Solution()\nprint(s.isSymmetric(root))",
        "detail": "101.symmetric-tree.101.symmetric-tree",
        "documentation": {}
    },
    {
        "label": "root.left",
        "kind": 5,
        "importPath": "101.symmetric-tree.101.symmetric-tree",
        "description": "101.symmetric-tree.101.symmetric-tree",
        "peekOfCode": "root.left = al\nroot.right = ar\nal.left = bl\nal.right = cl\nar.right = br\nar.left = cr\ns = Solution()\nprint(s.isSymmetric(root))",
        "detail": "101.symmetric-tree.101.symmetric-tree",
        "documentation": {}
    },
    {
        "label": "root.right",
        "kind": 5,
        "importPath": "101.symmetric-tree.101.symmetric-tree",
        "description": "101.symmetric-tree.101.symmetric-tree",
        "peekOfCode": "root.right = ar\nal.left = bl\nal.right = cl\nar.right = br\nar.left = cr\ns = Solution()\nprint(s.isSymmetric(root))",
        "detail": "101.symmetric-tree.101.symmetric-tree",
        "documentation": {}
    },
    {
        "label": "al.left",
        "kind": 5,
        "importPath": "101.symmetric-tree.101.symmetric-tree",
        "description": "101.symmetric-tree.101.symmetric-tree",
        "peekOfCode": "al.left = bl\nal.right = cl\nar.right = br\nar.left = cr\ns = Solution()\nprint(s.isSymmetric(root))",
        "detail": "101.symmetric-tree.101.symmetric-tree",
        "documentation": {}
    },
    {
        "label": "al.right",
        "kind": 5,
        "importPath": "101.symmetric-tree.101.symmetric-tree",
        "description": "101.symmetric-tree.101.symmetric-tree",
        "peekOfCode": "al.right = cl\nar.right = br\nar.left = cr\ns = Solution()\nprint(s.isSymmetric(root))",
        "detail": "101.symmetric-tree.101.symmetric-tree",
        "documentation": {}
    },
    {
        "label": "ar.right",
        "kind": 5,
        "importPath": "101.symmetric-tree.101.symmetric-tree",
        "description": "101.symmetric-tree.101.symmetric-tree",
        "peekOfCode": "ar.right = br\nar.left = cr\ns = Solution()\nprint(s.isSymmetric(root))",
        "detail": "101.symmetric-tree.101.symmetric-tree",
        "documentation": {}
    },
    {
        "label": "ar.left",
        "kind": 5,
        "importPath": "101.symmetric-tree.101.symmetric-tree",
        "description": "101.symmetric-tree.101.symmetric-tree",
        "peekOfCode": "ar.left = cr\ns = Solution()\nprint(s.isSymmetric(root))",
        "detail": "101.symmetric-tree.101.symmetric-tree",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "101.symmetric-tree.101.symmetric-tree",
        "description": "101.symmetric-tree.101.symmetric-tree",
        "peekOfCode": "s = Solution()\nprint(s.isSymmetric(root))",
        "detail": "101.symmetric-tree.101.symmetric-tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1020.number-of-enclaves.1020.number-of-enclaves",
        "description": "1020.number-of-enclaves.1020.number-of-enclaves",
        "peekOfCode": "class Solution:\n    def numEnclaves(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        def dfs(i, j):\n            if 0 <= i < m and 0 <= j < n and grid[i][j]:\n                grid[i][j] = 0\n                dfs(i-1, j)\n                dfs(i+1, j)\n                dfs(i, j-1)\n                dfs(i, j+1)",
        "detail": "1020.number-of-enclaves.1020.number-of-enclaves",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "1020.number-of-enclaves.1020.number-of-enclaves",
        "description": "1020.number-of-enclaves.1020.number-of-enclaves",
        "peekOfCode": "grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\ns = Solution()\nprint(s.numEnclaves(grid))",
        "detail": "1020.number-of-enclaves.1020.number-of-enclaves",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "1020.number-of-enclaves.1020.number-of-enclaves",
        "description": "1020.number-of-enclaves.1020.number-of-enclaves",
        "peekOfCode": "s = Solution()\nprint(s.numEnclaves(grid))",
        "detail": "1020.number-of-enclaves.1020.number-of-enclaves",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1035.uncrossed-lines.1035.uncrossed-lines",
        "description": "1035.uncrossed-lines.1035.uncrossed-lines",
        "peekOfCode": "class Solution:\n    def maxUncrossedLines(self, nums1: List[int], nums2: List[int]) -> int:\n        n, m = len(nums1), len(nums2)\n        if n < m:\n            return self.maxUncrossedLines(nums2, nums1)\n        dp = [0] * (m + 1)\n        for i in range(1, n + 1):\n            prev = 0\n            for j in range(1, m + 1):\n                curr = dp[j]",
        "detail": "1035.uncrossed-lines.1035.uncrossed-lines",
        "documentation": {}
    },
    {
        "label": "nums1",
        "kind": 5,
        "importPath": "1035.uncrossed-lines.1035.uncrossed-lines",
        "description": "1035.uncrossed-lines.1035.uncrossed-lines",
        "peekOfCode": "nums1 = [2,5,1,2,5]\nnums2 = [10,5,2,1,5,2]\ns = Solution()\nprint(s.maxUncrossedLines(nums1, nums2))",
        "detail": "1035.uncrossed-lines.1035.uncrossed-lines",
        "documentation": {}
    },
    {
        "label": "nums2",
        "kind": 5,
        "importPath": "1035.uncrossed-lines.1035.uncrossed-lines",
        "description": "1035.uncrossed-lines.1035.uncrossed-lines",
        "peekOfCode": "nums2 = [10,5,2,1,5,2]\ns = Solution()\nprint(s.maxUncrossedLines(nums1, nums2))",
        "detail": "1035.uncrossed-lines.1035.uncrossed-lines",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "1035.uncrossed-lines.1035.uncrossed-lines",
        "description": "1035.uncrossed-lines.1035.uncrossed-lines",
        "peekOfCode": "s = Solution()\nprint(s.maxUncrossedLines(nums1, nums2))",
        "detail": "1035.uncrossed-lines.1035.uncrossed-lines",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1046.last-stone-weight.1046.last-stone-weight",
        "description": "1046.last-stone-weight.1046.last-stone-weight",
        "peekOfCode": "class Solution:\n    def lastStoneWeight(self, stones: List[int]) -> int:\n        stones = [-x for x in stones]\n        heapq.heapify(stones)\n        while len(stones) > 1:\n            heapq.heappush(stones, heapq.heappop(stones) - heapq.heappop(stones))\n        return -stones[0]\nstones = [2, 7, 4, 1, 8, 1]\ns = Solution()\nprint(s.lastStoneWeight(stones))",
        "detail": "1046.last-stone-weight.1046.last-stone-weight",
        "documentation": {}
    },
    {
        "label": "stones",
        "kind": 5,
        "importPath": "1046.last-stone-weight.1046.last-stone-weight",
        "description": "1046.last-stone-weight.1046.last-stone-weight",
        "peekOfCode": "stones = [2, 7, 4, 1, 8, 1]\ns = Solution()\nprint(s.lastStoneWeight(stones))",
        "detail": "1046.last-stone-weight.1046.last-stone-weight",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "1046.last-stone-weight.1046.last-stone-weight",
        "description": "1046.last-stone-weight.1046.last-stone-weight",
        "peekOfCode": "s = Solution()\nprint(s.lastStoneWeight(stones))",
        "detail": "1046.last-stone-weight.1046.last-stone-weight",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "description": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\nclass Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n        def buildTreeHelper(inorder_start, inorder_end, postorder_start, postorder_end):\n            if inorder_start > inorder_end:\n                return None",
        "detail": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "description": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "peekOfCode": "class Solution:\n    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\n        def buildTreeHelper(inorder_start, inorder_end, postorder_start, postorder_end):\n            if inorder_start > inorder_end:\n                return None\n            val = postorder[postorder_end]\n            root = TreeNode(val)\n            inorder_index = inorder_dict[val]\n            left_tree_size = inorder_index - inorder_start\n            root.left = buildTreeHelper(inorder_start, inorder_index-1, postorder_start, postorder_start+left_tree_size-1)",
        "detail": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "documentation": {}
    },
    {
        "label": "inorder",
        "kind": 5,
        "importPath": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "description": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "peekOfCode": "inorder = [9,3,15,20,7]\npostorder = [9,15,7,20,3]\ns = Solution()\nroot = s.buildTree(inorder, postorder)\nqueue = [root]\nwhile len(queue):\n    node = queue.pop(0)\n    if not node:\n        print('null', end=' ,')\n    else:",
        "detail": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "documentation": {}
    },
    {
        "label": "postorder",
        "kind": 5,
        "importPath": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "description": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "peekOfCode": "postorder = [9,15,7,20,3]\ns = Solution()\nroot = s.buildTree(inorder, postorder)\nqueue = [root]\nwhile len(queue):\n    node = queue.pop(0)\n    if not node:\n        print('null', end=' ,')\n    else:\n        print(node.val, end=' ,')",
        "detail": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "description": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "peekOfCode": "s = Solution()\nroot = s.buildTree(inorder, postorder)\nqueue = [root]\nwhile len(queue):\n    node = queue.pop(0)\n    if not node:\n        print('null', end=' ,')\n    else:\n        print(node.val, end=' ,')\n        queue.append(node.left)",
        "detail": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "description": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "peekOfCode": "root = s.buildTree(inorder, postorder)\nqueue = [root]\nwhile len(queue):\n    node = queue.pop(0)\n    if not node:\n        print('null', end=' ,')\n    else:\n        print(node.val, end=' ,')\n        queue.append(node.left)\n        queue.append(node.right)",
        "detail": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "description": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "peekOfCode": "queue = [root]\nwhile len(queue):\n    node = queue.pop(0)\n    if not node:\n        print('null', end=' ,')\n    else:\n        print(node.val, end=' ,')\n        queue.append(node.left)\n        queue.append(node.right)",
        "detail": "106.construct-binary-tree-from-inorder-and-postorder-traversal.106.construct-binary-tree-from-inorder-and-postorder-traversal",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "description": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "peekOfCode": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right",
        "detail": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "description": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\nclass Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        if not head:\n            return None\n        if not head.next:",
        "detail": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "description": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "peekOfCode": "class Solution:\n    def sortedListToBST(self, head: Optional[ListNode]) -> Optional[TreeNode]:\n        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        slow, fast = head, head.next.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next",
        "detail": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "documentation": {}
    },
    {
        "label": "printTree",
        "kind": 2,
        "importPath": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "description": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "peekOfCode": "def printTree(root):\n    queue = [root]\n    while len(queue):\n        node = queue.pop(0)\n        print(node.val if node else 'null', end=', ')\n        if node:\n            queue.append(node.left)\n            queue.append(node.right)\nprintTree(root)",
        "detail": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "description": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "peekOfCode": "a = ListNode(-10, ListNode(-3, ListNode(0, ListNode(5, ListNode(9)))))\ns = Solution()\nroot = s.sortedListToBST(a)\ndef printTree(root):\n    queue = [root]\n    while len(queue):\n        node = queue.pop(0)\n        print(node.val if node else 'null', end=', ')\n        if node:\n            queue.append(node.left)",
        "detail": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "description": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "peekOfCode": "s = Solution()\nroot = s.sortedListToBST(a)\ndef printTree(root):\n    queue = [root]\n    while len(queue):\n        node = queue.pop(0)\n        print(node.val if node else 'null', end=', ')\n        if node:\n            queue.append(node.left)\n            queue.append(node.right)",
        "detail": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "description": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "peekOfCode": "root = s.sortedListToBST(a)\ndef printTree(root):\n    queue = [root]\n    while len(queue):\n        node = queue.pop(0)\n        print(node.val if node else 'null', end=', ')\n        if node:\n            queue.append(node.left)\n            queue.append(node.right)\nprintTree(root)",
        "detail": "109.convert-sorted-list-to-binary-search-tree.109.convert-sorted-list-to-binary-search-tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1254.number-of-closed-islands.1254.number-of-closed-islands",
        "description": "1254.number-of-closed-islands.1254.number-of-closed-islands",
        "peekOfCode": "class Solution:\n    def closedIsland(self, grid: List[List[int]]) -> int:\n        rows, cols = len(grid), len(grid[0])\n        count = 0\n        def dfs(i, j):\n            if i < 0 or j < 0 or i >= rows or j >= cols:\n                return False\n            if grid[i][j] == 1:\n                return True\n            grid[i][j] = 1",
        "detail": "1254.number-of-closed-islands.1254.number-of-closed-islands",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "1254.number-of-closed-islands.1254.number-of-closed-islands",
        "description": "1254.number-of-closed-islands.1254.number-of-closed-islands",
        "peekOfCode": "grid = [[0]]\ns = Solution()\nprint(s.closedIsland(grid))",
        "detail": "1254.number-of-closed-islands.1254.number-of-closed-islands",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "1254.number-of-closed-islands.1254.number-of-closed-islands",
        "description": "1254.number-of-closed-islands.1254.number-of-closed-islands",
        "peekOfCode": "s = Solution()\nprint(s.closedIsland(grid))",
        "detail": "1254.number-of-closed-islands.1254.number-of-closed-islands",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "description": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\nclass Solution:\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n        def dfs(node: Optional[TreeNode], total: int) -> int:\n            if not node:\n                return 0",
        "detail": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "description": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "peekOfCode": "class Solution:\n    def sumNumbers(self, root: Optional[TreeNode]) -> int:\n        def dfs(node: Optional[TreeNode], total: int) -> int:\n            if not node:\n                return 0\n            total = total * 10 + node.val\n            if not node.left and not node.right:\n                return total\n            return dfs(node.left, total) + dfs(node.right, total)\n        return dfs(root, 0)",
        "detail": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "description": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "peekOfCode": "a = TreeNode(4)\nb = TreeNode(9)\nc = TreeNode(0)\nd = TreeNode(5)\nf = TreeNode(1)\na.right = c\na.left = b\nb.left = f\nb.right = d\ns = Solution()",
        "detail": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "description": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "peekOfCode": "b = TreeNode(9)\nc = TreeNode(0)\nd = TreeNode(5)\nf = TreeNode(1)\na.right = c\na.left = b\nb.left = f\nb.right = d\ns = Solution()\nprint(s.sumNumbers(a))",
        "detail": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "description": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "peekOfCode": "c = TreeNode(0)\nd = TreeNode(5)\nf = TreeNode(1)\na.right = c\na.left = b\nb.left = f\nb.right = d\ns = Solution()\nprint(s.sumNumbers(a))",
        "detail": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "description": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "peekOfCode": "d = TreeNode(5)\nf = TreeNode(1)\na.right = c\na.left = b\nb.left = f\nb.right = d\ns = Solution()\nprint(s.sumNumbers(a))",
        "detail": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "description": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "peekOfCode": "f = TreeNode(1)\na.right = c\na.left = b\nb.left = f\nb.right = d\ns = Solution()\nprint(s.sumNumbers(a))",
        "detail": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "documentation": {}
    },
    {
        "label": "a.right",
        "kind": 5,
        "importPath": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "description": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "peekOfCode": "a.right = c\na.left = b\nb.left = f\nb.right = d\ns = Solution()\nprint(s.sumNumbers(a))",
        "detail": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "documentation": {}
    },
    {
        "label": "a.left",
        "kind": 5,
        "importPath": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "description": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "peekOfCode": "a.left = b\nb.left = f\nb.right = d\ns = Solution()\nprint(s.sumNumbers(a))",
        "detail": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "documentation": {}
    },
    {
        "label": "b.left",
        "kind": 5,
        "importPath": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "description": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "peekOfCode": "b.left = f\nb.right = d\ns = Solution()\nprint(s.sumNumbers(a))",
        "detail": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "documentation": {}
    },
    {
        "label": "b.right",
        "kind": 5,
        "importPath": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "description": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "peekOfCode": "b.right = d\ns = Solution()\nprint(s.sumNumbers(a))",
        "detail": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "description": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "peekOfCode": "s = Solution()\nprint(s.sumNumbers(a))",
        "detail": "129.sum-root-to-leaf-numbers.129.sum-root-to-leaf-numbers",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1319.number-of-operations-to-make-network-connected.1319.number-of-operations-to-make-network-connected",
        "description": "1319.number-of-operations-to-make-network-connected.1319.number-of-operations-to-make-network-connected",
        "peekOfCode": "class Solution:\n    def makeConnected(self, n: int, connections: List[List[int]]) -> int:\n        if len(connections) < n -1:\n            return -1\n        connected = [False] * n\n        edges = defaultdict(list)\n        for c1, c2 in connections:\n            edges[c1].append(c2)\n            edges[c2].append(c1)\n        res = 0",
        "detail": "1319.number-of-operations-to-make-network-connected.1319.number-of-operations-to-make-network-connected",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "1319.number-of-operations-to-make-network-connected.1319.number-of-operations-to-make-network-connected",
        "description": "1319.number-of-operations-to-make-network-connected.1319.number-of-operations-to-make-network-connected",
        "peekOfCode": "n = 4\nconnections = [[0,1],[0,2],[1,2]]\ns = Solution()\nprint(s.makeConnected(n, connections))",
        "detail": "1319.number-of-operations-to-make-network-connected.1319.number-of-operations-to-make-network-connected",
        "documentation": {}
    },
    {
        "label": "connections",
        "kind": 5,
        "importPath": "1319.number-of-operations-to-make-network-connected.1319.number-of-operations-to-make-network-connected",
        "description": "1319.number-of-operations-to-make-network-connected.1319.number-of-operations-to-make-network-connected",
        "peekOfCode": "connections = [[0,1],[0,2],[1,2]]\ns = Solution()\nprint(s.makeConnected(n, connections))",
        "detail": "1319.number-of-operations-to-make-network-connected.1319.number-of-operations-to-make-network-connected",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "1319.number-of-operations-to-make-network-connected.1319.number-of-operations-to-make-network-connected",
        "description": "1319.number-of-operations-to-make-network-connected.1319.number-of-operations-to-make-network-connected",
        "peekOfCode": "s = Solution()\nprint(s.makeConnected(n, connections))",
        "detail": "1319.number-of-operations-to-make-network-connected.1319.number-of-operations-to-make-network-connected",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "133.clone-graph.133. Clone Graph",
        "description": "133.clone-graph.133. Clone Graph",
        "peekOfCode": "class Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\nclass Solution:\n    def cloneGraph(self, node: 'Node') -> 'Node':\n        if not node:\n            return node\n        q, clones = deque([node]), {node.val: Node(node.val, [])}\n        while q:",
        "detail": "133.clone-graph.133. Clone Graph",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "133.clone-graph.133. Clone Graph",
        "description": "133.clone-graph.133. Clone Graph",
        "peekOfCode": "class Solution:\n    def cloneGraph(self, node: 'Node') -> 'Node':\n        if not node:\n            return node\n        q, clones = deque([node]), {node.val: Node(node.val, [])}\n        while q:\n            cur = q.popleft()\n            cur_clone = clones[cur.val]\n            for ngbr in cur.neighbors:\n                if ngbr.val not in clones:",
        "detail": "133.clone-graph.133. Clone Graph",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1345.jump-game-iv.1345.jump-game-iv",
        "description": "1345.jump-game-iv.1345.jump-game-iv",
        "peekOfCode": "class Solution:\n    def minJumps(self, arr: List[int]) -> int:\n        n = len(arr)\n        if n == 1:\n            return 0\n        indices = defaultdict(list)\n        for i in range(n):\n            indices[arr[i]].append(i)\n        visited = set()\n        visited.add(0)",
        "detail": "1345.jump-game-iv.1345.jump-game-iv",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "1345.jump-game-iv.1345.jump-game-iv",
        "description": "1345.jump-game-iv.1345.jump-game-iv",
        "peekOfCode": "arr = [7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,11]\ns = Solution()\nprint(s.minJumps(arr))",
        "detail": "1345.jump-game-iv.1345.jump-game-iv",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "1345.jump-game-iv.1345.jump-game-iv",
        "description": "1345.jump-game-iv.1345.jump-game-iv",
        "peekOfCode": "s = Solution()\nprint(s.minJumps(arr))",
        "detail": "1345.jump-game-iv.1345.jump-game-iv",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "1372.longest-zigzag-path-in-a-binary-tree.1372.longest-zigzag-path-in-a-binary-tree",
        "description": "1372.longest-zigzag-path-in-a-binary-tree.1372.longest-zigzag-path-in-a-binary-tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\nclass Solution:\n    def longestZigZag(self, root: Optional[TreeNode]) -> int:\n        self.ans = 0\n        def dfs(node, direction, cnt):\n            if not node:",
        "detail": "1372.longest-zigzag-path-in-a-binary-tree.1372.longest-zigzag-path-in-a-binary-tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1372.longest-zigzag-path-in-a-binary-tree.1372.longest-zigzag-path-in-a-binary-tree",
        "description": "1372.longest-zigzag-path-in-a-binary-tree.1372.longest-zigzag-path-in-a-binary-tree",
        "peekOfCode": "class Solution:\n    def longestZigZag(self, root: Optional[TreeNode]) -> int:\n        self.ans = 0\n        def dfs(node, direction, cnt):\n            if not node:\n                if cnt-1 > self.ans:\n                    self.ans = cnt -1\n                return cnt-1\n            if direction == \"left\":\n                dfs(node.right, \"right\", cnt + 1)",
        "detail": "1372.longest-zigzag-path-in-a-binary-tree.1372.longest-zigzag-path-in-a-binary-tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1402.reducing-dishes.1402.reducing-dishes",
        "description": "1402.reducing-dishes.1402.reducing-dishes",
        "peekOfCode": "class Solution:\n    def maxSatisfaction(self, satisfaction: List[int]) -> int:\n        satisfaction.sort(reverse=True)\n        total = 0\n        cur_sum = 0\n        for val in satisfaction:\n            cur_sum += val\n            if (cur_sum < 0):\n                break\n            total += cur_sum",
        "detail": "1402.reducing-dishes.1402.reducing-dishes",
        "documentation": {}
    },
    {
        "label": "satisfaction",
        "kind": 5,
        "importPath": "1402.reducing-dishes.1402.reducing-dishes",
        "description": "1402.reducing-dishes.1402.reducing-dishes",
        "peekOfCode": "satisfaction = [0,-8,-1,5,-9]\ns = Solution()\nprint(s.maxSatisfaction(satisfaction))",
        "detail": "1402.reducing-dishes.1402.reducing-dishes",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "1402.reducing-dishes.1402.reducing-dishes",
        "description": "1402.reducing-dishes.1402.reducing-dishes",
        "peekOfCode": "s = Solution()\nprint(s.maxSatisfaction(satisfaction))",
        "detail": "1402.reducing-dishes.1402.reducing-dishes",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "description": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "peekOfCode": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\nclass Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        mem = defaultdict(list)\n        while head:\n            for node in mem[head.val]:\n                if head is node:",
        "detail": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "description": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "peekOfCode": "class Solution:\n    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        mem = defaultdict(list)\n        while head:\n            for node in mem[head.val]:\n                if head is node:\n                    return node\n            mem[head.val].append(head)\n            head = head.next\na = ListNode(3)",
        "detail": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "description": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "peekOfCode": "a = ListNode(3)\nb = ListNode(2)\nc = ListNode(0)\nd = ListNode(4)\na.next = b\nb.next = c\nc.next = d\nd.next = b\ns = Solution()\nprint(s.detectCycle(a).val)",
        "detail": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "description": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "peekOfCode": "b = ListNode(2)\nc = ListNode(0)\nd = ListNode(4)\na.next = b\nb.next = c\nc.next = d\nd.next = b\ns = Solution()\nprint(s.detectCycle(a).val)",
        "detail": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "description": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "peekOfCode": "c = ListNode(0)\nd = ListNode(4)\na.next = b\nb.next = c\nc.next = d\nd.next = b\ns = Solution()\nprint(s.detectCycle(a).val)",
        "detail": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "description": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "peekOfCode": "d = ListNode(4)\na.next = b\nb.next = c\nc.next = d\nd.next = b\ns = Solution()\nprint(s.detectCycle(a).val)",
        "detail": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "documentation": {}
    },
    {
        "label": "a.next",
        "kind": 5,
        "importPath": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "description": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "peekOfCode": "a.next = b\nb.next = c\nc.next = d\nd.next = b\ns = Solution()\nprint(s.detectCycle(a).val)",
        "detail": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "documentation": {}
    },
    {
        "label": "b.next",
        "kind": 5,
        "importPath": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "description": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "peekOfCode": "b.next = c\nc.next = d\nd.next = b\ns = Solution()\nprint(s.detectCycle(a).val)",
        "detail": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "documentation": {}
    },
    {
        "label": "c.next",
        "kind": 5,
        "importPath": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "description": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "peekOfCode": "c.next = d\nd.next = b\ns = Solution()\nprint(s.detectCycle(a).val)",
        "detail": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "documentation": {}
    },
    {
        "label": "d.next",
        "kind": 5,
        "importPath": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "description": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "peekOfCode": "d.next = b\ns = Solution()\nprint(s.detectCycle(a).val)",
        "detail": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "description": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "peekOfCode": "s = Solution()\nprint(s.detectCycle(a).val)",
        "detail": "142.liked-list-cycle-ii.142.linked-list.cycle-ii",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1431.kids-with-the-greatest-number-of-candies.1431.kids-with-the-greatest-number-of-candies",
        "description": "1431.kids-with-the-greatest-number-of-candies.1431.kids-with-the-greatest-number-of-candies",
        "peekOfCode": "class Solution:\n    def kidsWithCandies(self, candies: List[int], extraCandies: int) -> List[bool]:\n        maxCandies = max(candies)\n        return [i + extraCandies >= maxCandies for i in candies]\ncandies = [2,3,5,1,3]\nextraCandies = 3\ns = Solution()\nprint(s.kidsWithCandies(candies, extraCandies))",
        "detail": "1431.kids-with-the-greatest-number-of-candies.1431.kids-with-the-greatest-number-of-candies",
        "documentation": {}
    },
    {
        "label": "candies",
        "kind": 5,
        "importPath": "1431.kids-with-the-greatest-number-of-candies.1431.kids-with-the-greatest-number-of-candies",
        "description": "1431.kids-with-the-greatest-number-of-candies.1431.kids-with-the-greatest-number-of-candies",
        "peekOfCode": "candies = [2,3,5,1,3]\nextraCandies = 3\ns = Solution()\nprint(s.kidsWithCandies(candies, extraCandies))",
        "detail": "1431.kids-with-the-greatest-number-of-candies.1431.kids-with-the-greatest-number-of-candies",
        "documentation": {}
    },
    {
        "label": "extraCandies",
        "kind": 5,
        "importPath": "1431.kids-with-the-greatest-number-of-candies.1431.kids-with-the-greatest-number-of-candies",
        "description": "1431.kids-with-the-greatest-number-of-candies.1431.kids-with-the-greatest-number-of-candies",
        "peekOfCode": "extraCandies = 3\ns = Solution()\nprint(s.kidsWithCandies(candies, extraCandies))",
        "detail": "1431.kids-with-the-greatest-number-of-candies.1431.kids-with-the-greatest-number-of-candies",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "1431.kids-with-the-greatest-number-of-candies.1431.kids-with-the-greatest-number-of-candies",
        "description": "1431.kids-with-the-greatest-number-of-candies.1431.kids-with-the-greatest-number-of-candies",
        "peekOfCode": "s = Solution()\nprint(s.kidsWithCandies(candies, extraCandies))",
        "detail": "1431.kids-with-the-greatest-number-of-candies.1431.kids-with-the-greatest-number-of-candies",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1444.number-of-ways-of-cutting-a-pizza.1444.number-of-ways-of-cutting-a-pizza",
        "description": "1444.number-of-ways-of-cutting-a-pizza.1444.number-of-ways-of-cutting-a-pizza",
        "peekOfCode": "class Solution:\n    def ways(self, pizza: List[str], K: int) -> int:\n        m, n, MOD = len(pizza), len(pizza[0]), 10 ** 9 + 7\n        preSum = [[0] * (n + 1) for _ in range(m + 1)]\n        for r in range(m - 1, -1, -1):\n            for c in range(n - 1, -1, -1):\n                preSum[r][c] = preSum[r][c + 1] + preSum[r + 1][c] - preSum[r + 1][c + 1] + (pizza[r][c] == 'A')\n        @lru_cache(None)\n        def dp(k, r, c):\n            if preSum[r][c] == 0: return 0",
        "detail": "1444.number-of-ways-of-cutting-a-pizza.1444.number-of-ways-of-cutting-a-pizza",
        "documentation": {}
    },
    {
        "label": "pizza",
        "kind": 5,
        "importPath": "1444.number-of-ways-of-cutting-a-pizza.1444.number-of-ways-of-cutting-a-pizza",
        "description": "1444.number-of-ways-of-cutting-a-pizza.1444.number-of-ways-of-cutting-a-pizza",
        "peekOfCode": "pizza = [\"A..\",\"AAA\",\"...\"]\nk = 3\ns= Solution()\nprint(s.ways(pizza, k))",
        "detail": "1444.number-of-ways-of-cutting-a-pizza.1444.number-of-ways-of-cutting-a-pizza",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "1444.number-of-ways-of-cutting-a-pizza.1444.number-of-ways-of-cutting-a-pizza",
        "description": "1444.number-of-ways-of-cutting-a-pizza.1444.number-of-ways-of-cutting-a-pizza",
        "peekOfCode": "k = 3\ns= Solution()\nprint(s.ways(pizza, k))",
        "detail": "1444.number-of-ways-of-cutting-a-pizza.1444.number-of-ways-of-cutting-a-pizza",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1456.maximum-number-of-vowels-in-a-substring-of-given-length.1456.maximum-number-of-vowels-in-a-substring-of-given-length",
        "description": "1456.maximum-number-of-vowels-in-a-substring-of-given-length.1456.maximum-number-of-vowels-in-a-substring-of-given-length",
        "peekOfCode": "class Solution:\n    def maxVowels(self, s: str, k: int) -> int:\n        vowels = set(['a', 'e', 'i', 'o', 'u'])\n        count = 0\n        for i in s[0:k]:\n            if i in vowels:\n                count += 1\n        if count == k:\n            return count\n        largest = count",
        "detail": "1456.maximum-number-of-vowels-in-a-substring-of-given-length.1456.maximum-number-of-vowels-in-a-substring-of-given-length",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "1456.maximum-number-of-vowels-in-a-substring-of-given-length.1456.maximum-number-of-vowels-in-a-substring-of-given-length",
        "description": "1456.maximum-number-of-vowels-in-a-substring-of-given-length.1456.maximum-number-of-vowels-in-a-substring-of-given-length",
        "peekOfCode": "s = \"aeiou\"\nk = 2\nsol = Solution()\nprint(sol.maxVowels(s, k))",
        "detail": "1456.maximum-number-of-vowels-in-a-substring-of-given-length.1456.maximum-number-of-vowels-in-a-substring-of-given-length",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "1456.maximum-number-of-vowels-in-a-substring-of-given-length.1456.maximum-number-of-vowels-in-a-substring-of-given-length",
        "description": "1456.maximum-number-of-vowels-in-a-substring-of-given-length.1456.maximum-number-of-vowels-in-a-substring-of-given-length",
        "peekOfCode": "k = 2\nsol = Solution()\nprint(sol.maxVowels(s, k))",
        "detail": "1456.maximum-number-of-vowels-in-a-substring-of-given-length.1456.maximum-number-of-vowels-in-a-substring-of-given-length",
        "documentation": {}
    },
    {
        "label": "sol",
        "kind": 5,
        "importPath": "1456.maximum-number-of-vowels-in-a-substring-of-given-length.1456.maximum-number-of-vowels-in-a-substring-of-given-length",
        "description": "1456.maximum-number-of-vowels-in-a-substring-of-given-length.1456.maximum-number-of-vowels-in-a-substring-of-given-length",
        "peekOfCode": "sol = Solution()\nprint(sol.maxVowels(s, k))",
        "detail": "1456.maximum-number-of-vowels-in-a-substring-of-given-length.1456.maximum-number-of-vowels-in-a-substring-of-given-length",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero.1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "description": "1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero.1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "peekOfCode": "class Solution:\n    def minReorder(self, n: int, connections: List[List[int]]) -> int:\n        graph = defaultdict(list)\n        for u,v in connections:\n            graph[u].append([v, 1]) # forward edge\n            graph[v].append([u, 0]) # backward edge\n        q = deque([0])\n        seen = {0}\n        ans = 0\n        while q:",
        "detail": "1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero.1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero.1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "description": "1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero.1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "peekOfCode": "n = 3\nconnections = [[1,0],[2,0]]\ns = Solution()\nprint(s.minReorder(n, connections))",
        "detail": "1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero.1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "documentation": {}
    },
    {
        "label": "connections",
        "kind": 5,
        "importPath": "1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero.1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "description": "1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero.1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "peekOfCode": "connections = [[1,0],[2,0]]\ns = Solution()\nprint(s.minReorder(n, connections))",
        "detail": "1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero.1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero.1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "description": "1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero.1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "peekOfCode": "s = Solution()\nprint(s.minReorder(n, connections))",
        "detail": "1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero.1466.reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "documentation": {}
    },
    {
        "label": "BrowserHistory",
        "kind": 6,
        "importPath": "1472.design-browser-history.1472.design-browser-history",
        "description": "1472.design-browser-history.1472.design-browser-history",
        "peekOfCode": "class BrowserHistory:\n    def __init__(self, homepage: str):\n        self.back_stack = [homepage]\n        self.forward_stack = []\n    def visit(self, url: str) -> None:\n        self.back_stack.append(url)\n        self.forward_stack.clear()\n    def back(self, steps: int) -> str:\n        while steps and len(self.back_stack) > 1:\n            url = self.back_stack.pop()",
        "detail": "1472.design-browser-history.1472.design-browser-history",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "1472.design-browser-history.1472.design-browser-history",
        "description": "1472.design-browser-history.1472.design-browser-history",
        "peekOfCode": "b = BrowserHistory(\"leetcode.com\")\nprint(b.visit(\"google.com\"))\nprint(b.visit(\"facebook.com\"))\nprint(b.visit(\"youtube.com\"))\nprint(b.back(1))\nprint(b.back(1))\nprint(b.forward(1))\nprint(b.visit(\"linkedin.com\"))\nprint(b.forward(2))\nprint(b.back(2))",
        "detail": "1472.design-browser-history.1472.design-browser-history",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1498.number-of-subsequences-that-satisfy-the-given-sum-condition.1498.number-of-subsequences-that-satisfy-the-given-sum-condition",
        "description": "1498.number-of-subsequences-that-satisfy-the-given-sum-condition.1498.number-of-subsequences-that-satisfy-the-given-sum-condition",
        "peekOfCode": "class Solution:\n    def numSubseq(self, nums: List[int], target: int) -> int:\n        nums.sort()\n        l, r = 0, len(nums) - 1\n        res = 0\n        mod = 10**9 + 7\n        while l <= r:\n            if nums[l] + nums[r] > target:\n                r -= 1\n            else:",
        "detail": "1498.number-of-subsequences-that-satisfy-the-given-sum-condition.1498.number-of-subsequences-that-satisfy-the-given-sum-condition",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "1498.number-of-subsequences-that-satisfy-the-given-sum-condition.1498.number-of-subsequences-that-satisfy-the-given-sum-condition",
        "description": "1498.number-of-subsequences-that-satisfy-the-given-sum-condition.1498.number-of-subsequences-that-satisfy-the-given-sum-condition",
        "peekOfCode": "nums = [2, 3, 4 ,5, 6, 7]\ntarget = 9\ns = Solution()\nprint(s.numSubseq(nums, target))\n# nums = [2 3 4 5 6 7]\n# ind  = [0 1 2 3 4 5]\n# l = 0 r = 5 => 2 ^ 4 + 2 ^ 3 + 2 ^ 2 + 2 ^ 1 + 2 ^ 0 + 1 = 2 ^ 5",
        "detail": "1498.number-of-subsequences-that-satisfy-the-given-sum-condition.1498.number-of-subsequences-that-satisfy-the-given-sum-condition",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "1498.number-of-subsequences-that-satisfy-the-given-sum-condition.1498.number-of-subsequences-that-satisfy-the-given-sum-condition",
        "description": "1498.number-of-subsequences-that-satisfy-the-given-sum-condition.1498.number-of-subsequences-that-satisfy-the-given-sum-condition",
        "peekOfCode": "target = 9\ns = Solution()\nprint(s.numSubseq(nums, target))\n# nums = [2 3 4 5 6 7]\n# ind  = [0 1 2 3 4 5]\n# l = 0 r = 5 => 2 ^ 4 + 2 ^ 3 + 2 ^ 2 + 2 ^ 1 + 2 ^ 0 + 1 = 2 ^ 5",
        "detail": "1498.number-of-subsequences-that-satisfy-the-given-sum-condition.1498.number-of-subsequences-that-satisfy-the-given-sum-condition",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "1498.number-of-subsequences-that-satisfy-the-given-sum-condition.1498.number-of-subsequences-that-satisfy-the-given-sum-condition",
        "description": "1498.number-of-subsequences-that-satisfy-the-given-sum-condition.1498.number-of-subsequences-that-satisfy-the-given-sum-condition",
        "peekOfCode": "s = Solution()\nprint(s.numSubseq(nums, target))\n# nums = [2 3 4 5 6 7]\n# ind  = [0 1 2 3 4 5]\n# l = 0 r = 5 => 2 ^ 4 + 2 ^ 3 + 2 ^ 2 + 2 ^ 1 + 2 ^ 0 + 1 = 2 ^ 5",
        "detail": "1498.number-of-subsequences-that-satisfy-the-given-sum-condition.1498.number-of-subsequences-that-satisfy-the-given-sum-condition",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1539.kth-missing-positive-number.1539.kth-missing-positive-number",
        "description": "1539.kth-missing-positive-number.1539.kth-missing-positive-number",
        "peekOfCode": "class Solution:\n    def findKthPositive(self, arr: List[int], k: int) -> int:\n        left, right = 0, len(arr)\n        while left < right:\n            mid = (left + right) >> 1\n            count = arr[mid] - mid - 1\n            if count >= k:\n                right = mid\n            else:\n                left = mid + 1",
        "detail": "1539.kth-missing-positive-number.1539.kth-missing-positive-number",
        "documentation": {}
    },
    {
        "label": "arr",
        "kind": 5,
        "importPath": "1539.kth-missing-positive-number.1539.kth-missing-positive-number",
        "description": "1539.kth-missing-positive-number.1539.kth-missing-positive-number",
        "peekOfCode": "arr = [2,3,4,7,11]\nk = 5\ns = Solution()\nprint(s.findKthPositive(arr, k))",
        "detail": "1539.kth-missing-positive-number.1539.kth-missing-positive-number",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "1539.kth-missing-positive-number.1539.kth-missing-positive-number",
        "description": "1539.kth-missing-positive-number.1539.kth-missing-positive-number",
        "peekOfCode": "k = 5\ns = Solution()\nprint(s.findKthPositive(arr, k))",
        "detail": "1539.kth-missing-positive-number.1539.kth-missing-positive-number",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "1539.kth-missing-positive-number.1539.kth-missing-positive-number",
        "description": "1539.kth-missing-positive-number.1539.kth-missing-positive-number",
        "peekOfCode": "s = Solution()\nprint(s.findKthPositive(arr, k))",
        "detail": "1539.kth-missing-positive-number.1539.kth-missing-positive-number",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1557.minimum-number-of-vertices-to-reach-all-nodes.1557.minimum-number-of-vertices-to-reach-all-nodes",
        "description": "1557.minimum-number-of-vertices-to-reach-all-nodes.1557.minimum-number-of-vertices-to-reach-all-nodes",
        "peekOfCode": "class Solution:\n    def findSmallestSetOfVertices(self, n: int, edges: List[List[int]]) -> List[int]:\n        should_include = [True] * n\n        for e in edges:\n            should_include[e[1]] = False\n        return [i for i in range(n) if should_include[i]]\nn = 6\nedges = [[0, 1], [0, 2], [2, 5], [3, 4], [4, 2]]\ns = Solution()\nprint(s.findSmallestSetOfVertices(n, edges))",
        "detail": "1557.minimum-number-of-vertices-to-reach-all-nodes.1557.minimum-number-of-vertices-to-reach-all-nodes",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "1557.minimum-number-of-vertices-to-reach-all-nodes.1557.minimum-number-of-vertices-to-reach-all-nodes",
        "description": "1557.minimum-number-of-vertices-to-reach-all-nodes.1557.minimum-number-of-vertices-to-reach-all-nodes",
        "peekOfCode": "n = 6\nedges = [[0, 1], [0, 2], [2, 5], [3, 4], [4, 2]]\ns = Solution()\nprint(s.findSmallestSetOfVertices(n, edges))",
        "detail": "1557.minimum-number-of-vertices-to-reach-all-nodes.1557.minimum-number-of-vertices-to-reach-all-nodes",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "1557.minimum-number-of-vertices-to-reach-all-nodes.1557.minimum-number-of-vertices-to-reach-all-nodes",
        "description": "1557.minimum-number-of-vertices-to-reach-all-nodes.1557.minimum-number-of-vertices-to-reach-all-nodes",
        "peekOfCode": "edges = [[0, 1], [0, 2], [2, 5], [3, 4], [4, 2]]\ns = Solution()\nprint(s.findSmallestSetOfVertices(n, edges))",
        "detail": "1557.minimum-number-of-vertices-to-reach-all-nodes.1557.minimum-number-of-vertices-to-reach-all-nodes",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "1557.minimum-number-of-vertices-to-reach-all-nodes.1557.minimum-number-of-vertices-to-reach-all-nodes",
        "description": "1557.minimum-number-of-vertices-to-reach-all-nodes.1557.minimum-number-of-vertices-to-reach-all-nodes",
        "peekOfCode": "s = Solution()\nprint(s.findSmallestSetOfVertices(n, edges))",
        "detail": "1557.minimum-number-of-vertices-to-reach-all-nodes.1557.minimum-number-of-vertices-to-reach-all-nodes",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1572.matrix-diagonal-sum.1572.matrix-diagonal-sum",
        "description": "1572.matrix-diagonal-sum.1572.matrix-diagonal-sum",
        "peekOfCode": "class Solution:\n    def diagonalSum(self, mat: List[List[int]]) -> int:\n        sum = 0\n        n = len(mat)\n        if (n == 1):\n            return mat[0][0]\n        m = n+1\n        for i in range(n):\n            if (n > 1):\n                sum += mat[i][i]",
        "detail": "1572.matrix-diagonal-sum.1572.matrix-diagonal-sum",
        "documentation": {}
    },
    {
        "label": "mat",
        "kind": 5,
        "importPath": "1572.matrix-diagonal-sum.1572.matrix-diagonal-sum",
        "description": "1572.matrix-diagonal-sum.1572.matrix-diagonal-sum",
        "peekOfCode": "mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ns = Solution()\nprint(s.diagonalSum(sum))",
        "detail": "1572.matrix-diagonal-sum.1572.matrix-diagonal-sum",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "1572.matrix-diagonal-sum.1572.matrix-diagonal-sum",
        "description": "1572.matrix-diagonal-sum.1572.matrix-diagonal-sum",
        "peekOfCode": "s = Solution()\nprint(s.diagonalSum(sum))",
        "detail": "1572.matrix-diagonal-sum.1572.matrix-diagonal-sum",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "description": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "peekOfCode": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def swapNodes(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        first = last = head\n        for _ in range(1, k):\n            first = first.next\n        null_checker = first",
        "detail": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "description": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "peekOfCode": "class Solution:\n    def swapNodes(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:\n        first = last = head\n        for _ in range(1, k):\n            first = first.next\n        null_checker = first\n        while null_checker.next:\n            last = last.next\n            null_checker = null_checker.next\n        first.val, last.val = last.val, first.val",
        "detail": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "documentation": {}
    },
    {
        "label": "head_val",
        "kind": 5,
        "importPath": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "description": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "peekOfCode": "head_val = [1, 2, 3, 4, 5]\nn = len(head_val)\nstart = head = ListNode(head_val[0])\nfor i in range(1, n):\n    start.next = ListNode(head_val[i])\n    start = start.next\nk = 2\ns = Solution()\nprint(s.swapNodes(head, k))",
        "detail": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "description": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "peekOfCode": "n = len(head_val)\nstart = head = ListNode(head_val[0])\nfor i in range(1, n):\n    start.next = ListNode(head_val[i])\n    start = start.next\nk = 2\ns = Solution()\nprint(s.swapNodes(head, k))",
        "detail": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 5,
        "importPath": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "description": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "peekOfCode": "start = head = ListNode(head_val[0])\nfor i in range(1, n):\n    start.next = ListNode(head_val[i])\n    start = start.next\nk = 2\ns = Solution()\nprint(s.swapNodes(head, k))",
        "detail": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "description": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "peekOfCode": "k = 2\ns = Solution()\nprint(s.swapNodes(head, k))",
        "detail": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "description": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "peekOfCode": "s = Solution()\nprint(s.swapNodes(head, k))",
        "detail": "1721.swapping-nodes-in-a-linked-list.1721.swapping-nodes-in-a-linked-list",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1768.merge-strings-alternately.1768.merge-strings-alternately",
        "description": "1768.merge-strings-alternately.1768.merge-strings-alternately",
        "peekOfCode": "class Solution:\n    def mergeAlternately(self, word1: str, word2: str) -> str:\n        n = min(len(word1), len(word2))\n        st = \"\"\n        for i in range(n):\n            st += word1[i] + word2[i]\n        return st+word1[n:]+word2[n:]\nword1 = \"ab\"\nword2 = \"pqrs\"\ns = Solution()",
        "detail": "1768.merge-strings-alternately.1768.merge-strings-alternately",
        "documentation": {}
    },
    {
        "label": "word1",
        "kind": 5,
        "importPath": "1768.merge-strings-alternately.1768.merge-strings-alternately",
        "description": "1768.merge-strings-alternately.1768.merge-strings-alternately",
        "peekOfCode": "word1 = \"ab\"\nword2 = \"pqrs\"\ns = Solution()\nprint(s.mergeAlternately(word1, word2))",
        "detail": "1768.merge-strings-alternately.1768.merge-strings-alternately",
        "documentation": {}
    },
    {
        "label": "word2",
        "kind": 5,
        "importPath": "1768.merge-strings-alternately.1768.merge-strings-alternately",
        "description": "1768.merge-strings-alternately.1768.merge-strings-alternately",
        "peekOfCode": "word2 = \"pqrs\"\ns = Solution()\nprint(s.mergeAlternately(word1, word2))",
        "detail": "1768.merge-strings-alternately.1768.merge-strings-alternately",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "1768.merge-strings-alternately.1768.merge-strings-alternately",
        "description": "1768.merge-strings-alternately.1768.merge-strings-alternately",
        "peekOfCode": "s = Solution()\nprint(s.mergeAlternately(word1, word2))",
        "detail": "1768.merge-strings-alternately.1768.merge-strings-alternately",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "1857.largest-color-value-in-a-directed-graph.1857. Largest Color Value in a Directed Graph",
        "description": "1857.largest-color-value-in-a-directed-graph.1857. Largest Color Value in a Directed Graph",
        "peekOfCode": "class Solution:\n    def largestPathValue(self, colors: str, edges: List[List[int]]) -> int:\n        n = len(colors)\n        graph = defaultdict(list)\n        indegree = [0] * len(colors)\n        for u, v in edges:\n            graph[v].append(u)\n            indegree[u] += 1\n        count = [defaultdict(int) for _ in range(n)]\n        q = deque(filter(lambda i: not indegree[i], range(n)))",
        "detail": "1857.largest-color-value-in-a-directed-graph.1857. Largest Color Value in a Directed Graph",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "20.valid-parentheses.20.valid-parentheses",
        "description": "20.valid-parentheses.20.valid-parentheses",
        "peekOfCode": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = deque()\n        check = {'}': '{', ']': '[', ')': '('}\n        for i in s:\n            if i == '(' or i == '{' or i == '[':\n                stack.append(i)\n            elif not stack or stack.pop() != check[i]:\n                return False\n        if not stack:",
        "detail": "20.valid-parentheses.20.valid-parentheses",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "20.valid-parentheses.20.valid-parentheses",
        "description": "20.valid-parentheses.20.valid-parentheses",
        "peekOfCode": "s = '()[]{}'\nsolution = Solution()\nprint(solution.isValid(s))",
        "detail": "20.valid-parentheses.20.valid-parentheses",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 5,
        "importPath": "20.valid-parentheses.20.valid-parentheses",
        "description": "20.valid-parentheses.20.valid-parentheses",
        "peekOfCode": "solution = Solution()\nprint(solution.isValid(s))",
        "detail": "20.valid-parentheses.20.valid-parentheses",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "description": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "peekOfCode": "class Node:\n    def __init__(self, value=None, is_terminal=False):\n        self.children = {}\n        self.value = value\n        self.is_terminal = is_terminal\nclass Trie:\n    def __init__(self):\n        self.root = Node()\n    def insert(self, word: str) -> None:\n        node = self.root",
        "detail": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "documentation": {}
    },
    {
        "label": "Trie",
        "kind": 6,
        "importPath": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "description": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "peekOfCode": "class Trie:\n    def __init__(self):\n        self.root = Node()\n    def insert(self, word: str) -> None:\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = Node(value=char)\n            node = node.children[char]\n        node.is_terminal = True",
        "detail": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "description": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "peekOfCode": "obj = Trie()\nobj.insert(\"apple\")\nparam_2 = obj.search(\"apple\")\nparam_3 = obj.search(\"app\")\nparam_4 = obj.startsWith(\"app\")\nprint(param_2, param_3, param_4)",
        "detail": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "documentation": {}
    },
    {
        "label": "param_2",
        "kind": 5,
        "importPath": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "description": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "peekOfCode": "param_2 = obj.search(\"apple\")\nparam_3 = obj.search(\"app\")\nparam_4 = obj.startsWith(\"app\")\nprint(param_2, param_3, param_4)",
        "detail": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "documentation": {}
    },
    {
        "label": "param_3",
        "kind": 5,
        "importPath": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "description": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "peekOfCode": "param_3 = obj.search(\"app\")\nparam_4 = obj.startsWith(\"app\")\nprint(param_2, param_3, param_4)",
        "detail": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "documentation": {}
    },
    {
        "label": "param_4",
        "kind": 5,
        "importPath": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "description": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "peekOfCode": "param_4 = obj.startsWith(\"app\")\nprint(param_2, param_3, param_4)",
        "detail": "208.implement-trie-prefix-tree.208.208.implement-trie-prefix-tree",
        "documentation": {}
    },
    {
        "label": "WordDictionary",
        "kind": 6,
        "importPath": "211.design-add-and-search-words-data-structure.211.design-add-and-search-words-data-structure",
        "description": "211.design-add-and-search-words-data-structure.211.design-add-and-search-words-data-structure",
        "peekOfCode": "class WordDictionary:\n    def __init__(self):\n        self.word_dictionary = defaultdict(set)\n    def addWord(self, word: str) -> None:\n        self.word_dictionary[len(word)].add(word)\n    def search(self, word: str) -> bool:\n        if '.' not in word:\n            return word in self.word_dictionary[len(word)]\n        for w in self.word_dictionary[len(word)]:\n            for i, char in enumerate(word):",
        "detail": "211.design-add-and-search-words-data-structure.211.design-add-and-search-words-data-structure",
        "documentation": {}
    },
    {
        "label": "wordDictionary",
        "kind": 5,
        "importPath": "211.design-add-and-search-words-data-structure.211.design-add-and-search-words-data-structure",
        "description": "211.design-add-and-search-words-data-structure.211.design-add-and-search-words-data-structure",
        "peekOfCode": "wordDictionary = WordDictionary()\nwordDictionary.addWord(\"bad\")\nwordDictionary.addWord(\"dad\")\nwordDictionary.addWord(\"mad\")\nprint(wordDictionary.search(\"pad\")) # return False\nprint(wordDictionary.search(\"bad\")) # return True\nprint(wordDictionary.search(\".ad\")) # return True\nprint(wordDictionary.search(\"b..\")) # return True",
        "detail": "211.design-add-and-search-words-data-structure.211.design-add-and-search-words-data-structure",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "2130.maximum-twin-sum-of-a-linked-list.2130.maximum-twin-sum-of-a-linked-list",
        "description": "2130.maximum-twin-sum-of-a-linked-list.2130.maximum-twin-sum-of-a-linked-list",
        "peekOfCode": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def pairSum(self, head: Optional[ListNode]) -> int:\n        slow, fast = head, head\n        prev = None\n        while fast and fast.next:\n            fast = fast.next.next",
        "detail": "2130.maximum-twin-sum-of-a-linked-list.2130.maximum-twin-sum-of-a-linked-list",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "2130.maximum-twin-sum-of-a-linked-list.2130.maximum-twin-sum-of-a-linked-list",
        "description": "2130.maximum-twin-sum-of-a-linked-list.2130.maximum-twin-sum-of-a-linked-list",
        "peekOfCode": "class Solution:\n    def pairSum(self, head: Optional[ListNode]) -> int:\n        slow, fast = head, head\n        prev = None\n        while fast and fast.next:\n            fast = fast.next.next\n            temp = slow.next\n            slow.next = prev\n            prev = slow\n            slow = temp",
        "detail": "2130.maximum-twin-sum-of-a-linked-list.2130.maximum-twin-sum-of-a-linked-list",
        "documentation": {}
    },
    {
        "label": "head",
        "kind": 5,
        "importPath": "2130.maximum-twin-sum-of-a-linked-list.2130.maximum-twin-sum-of-a-linked-list",
        "description": "2130.maximum-twin-sum-of-a-linked-list.2130.maximum-twin-sum-of-a-linked-list",
        "peekOfCode": "head = ListNode(5, ListNode(4, ListNode(2, ListNode(1))))\ns = Solution()\nprint(s.pairSum(head))",
        "detail": "2130.maximum-twin-sum-of-a-linked-list.2130.maximum-twin-sum-of-a-linked-list",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "2130.maximum-twin-sum-of-a-linked-list.2130.maximum-twin-sum-of-a-linked-list",
        "description": "2130.maximum-twin-sum-of-a-linked-list.2130.maximum-twin-sum-of-a-linked-list",
        "peekOfCode": "s = Solution()\nprint(s.pairSum(head))",
        "detail": "2130.maximum-twin-sum-of-a-linked-list.2130.maximum-twin-sum-of-a-linked-list",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "2140.solving-questions-with-brainpower.2140.solving-questions-with-brainpower",
        "description": "2140.solving-questions-with-brainpower.2140.solving-questions-with-brainpower",
        "peekOfCode": "class Solution:\n    def mostPoints(self, questions: List[List[int]]) -> int:\n        n = len(questions)\n        dp = [0] * (n+1)\n        for i in range(n-1, -1, -1):\n            point, jump = questions[i]\n            nextQuestion = min(n, i+jump+1)\n            dp[i] = max(dp[i+1], point + dp[nextQuestion])\n        return dp[0]\nquestions = [[68382, 2635], [21246, 90303], [82036, 79998], [255, 4259], [49601, 49062], [24765, 84993], [97755, 20448], [8702, 76610], [35153, 44912], [35413, 6123], [49093, 3879], [49723, 18876], [59525, 18944], [49669, 24295], [788, 33809], [66886, 80265], [34178, 79786], [66361, 88223], [54375, 50795], [68960, 10399], [29426, 5048], [71412, 63477], [28213, 70982], [66964, 28744], [372, 93646], [27035, 58291], [65608, 11208], [39450, 38992], [4206, 37883], [5558, 52437], [75360, 43138], [9647, 95827], [65237, 92270], [37775, 84839], [89098, 24149], [56673, 91926], [1924, 57304], [40246, 76664], [32241, 53919], [33851, 88592], [23673, 94009], [1475, 43699], [82614, 67054], [31255, 83094], [35528, 56603], [8528, 37806], [31728, 37990], [",
        "detail": "2140.solving-questions-with-brainpower.2140.solving-questions-with-brainpower",
        "documentation": {}
    },
    {
        "label": "questions",
        "kind": 5,
        "importPath": "2140.solving-questions-with-brainpower.2140.solving-questions-with-brainpower",
        "description": "2140.solving-questions-with-brainpower.2140.solving-questions-with-brainpower",
        "peekOfCode": "questions = [[68382, 2635], [21246, 90303], [82036, 79998], [255, 4259], [49601, 49062], [24765, 84993], [97755, 20448], [8702, 76610], [35153, 44912], [35413, 6123], [49093, 3879], [49723, 18876], [59525, 18944], [49669, 24295], [788, 33809], [66886, 80265], [34178, 79786], [66361, 88223], [54375, 50795], [68960, 10399], [29426, 5048], [71412, 63477], [28213, 70982], [66964, 28744], [372, 93646], [27035, 58291], [65608, 11208], [39450, 38992], [4206, 37883], [5558, 52437], [75360, 43138], [9647, 95827], [65237, 92270], [37775, 84839], [89098, 24149], [56673, 91926], [1924, 57304], [40246, 76664], [32241, 53919], [33851, 88592], [23673, 94009], [1475, 43699], [82614, 67054], [31255, 83094], [35528, 56603], [8528, 37806], [31728, 37990], [\n    47879, 78814], [15466, 23219], [7830, 38386], [19869, 59998], [35795, 88030], [90176, 49624], [16886, 51173], [57869, 23952], [78999, 29876], [53937, 56956], [20110, 33243], [31385, 70561], [90147, 9673], [23633, 30107], [47809, 74836], [10814, 4861], [11472, 39836], [19355, 33322], [73315, 14348], [52973, 77524], [30280, 82371], [68760, 30131], [887, 72130], [19221, 14749], [20020, 22782], [64125, 43752], [61301, 13605], [947, 70975], [81640, 21117], [47914, 50164], [23356, 52436], [69440, 67228], [11351, 37916], [66728, 97354], [49564, 25215], [13359, 84825], [3042, 56005], [43408, 56580], [2730, 24717], [76622, 8980], [75599, 36995], [10959, 41425], [85431, 70544], [59750, 45922], [93904, 56956], [51231, 66145], [40424, 13462]]\ns = Solution()\nprint(s.mostPoints(questions))",
        "detail": "2140.solving-questions-with-brainpower.2140.solving-questions-with-brainpower",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "2140.solving-questions-with-brainpower.2140.solving-questions-with-brainpower",
        "description": "2140.solving-questions-with-brainpower.2140.solving-questions-with-brainpower",
        "peekOfCode": "s = Solution()\nprint(s.mostPoints(questions))",
        "detail": "2140.solving-questions-with-brainpower.2140.solving-questions-with-brainpower",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "2187.minimum-time-to-complete-trips.2187.minimum-time-to-complete-trips",
        "description": "2187.minimum-time-to-complete-trips.2187.minimum-time-to-complete-trips",
        "peekOfCode": "class Solution:\n    def minimumTime(self, time: List[int], totalTrips: int) -> int:\n        def check(totalTime: int) -> bool:\n            total = sum(totalTime // t for t in time)\n            return total >= totalTrips\n        low, high = min(time), max(time) * totalTrips\n        while high > low:\n            mid = (low + high) >> 1\n            if check(mid):\n                high = mid",
        "detail": "2187.minimum-time-to-complete-trips.2187.minimum-time-to-complete-trips",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 5,
        "importPath": "2187.minimum-time-to-complete-trips.2187.minimum-time-to-complete-trips",
        "description": "2187.minimum-time-to-complete-trips.2187.minimum-time-to-complete-trips",
        "peekOfCode": "time = [5,10,10]\ntotalTrips = 9\ns = Solution()\nprint(s.minimumTime(time, totalTrips))",
        "detail": "2187.minimum-time-to-complete-trips.2187.minimum-time-to-complete-trips",
        "documentation": {}
    },
    {
        "label": "totalTrips",
        "kind": 5,
        "importPath": "2187.minimum-time-to-complete-trips.2187.minimum-time-to-complete-trips",
        "description": "2187.minimum-time-to-complete-trips.2187.minimum-time-to-complete-trips",
        "peekOfCode": "totalTrips = 9\ns = Solution()\nprint(s.minimumTime(time, totalTrips))",
        "detail": "2187.minimum-time-to-complete-trips.2187.minimum-time-to-complete-trips",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "2187.minimum-time-to-complete-trips.2187.minimum-time-to-complete-trips",
        "description": "2187.minimum-time-to-complete-trips.2187.minimum-time-to-complete-trips",
        "peekOfCode": "s = Solution()\nprint(s.minimumTime(time, totalTrips))",
        "detail": "2187.minimum-time-to-complete-trips.2187.minimum-time-to-complete-trips",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "2215.find-the-difference-of-two-arrays.2215.find-the-difference-of-two-arrays",
        "description": "2215.find-the-difference-of-two-arrays.2215.find-the-difference-of-two-arrays",
        "peekOfCode": "class Solution:\n    def findDifference(self, nums1: List[int], nums2: List[int]) -> List[List[int]]:\n        s1 = set(nums1)\n        s2 = set(nums2)\n        return [list(s1-s2), list(s2-s1)]\nnums1 = [52, -21]\nnums2 = [22, 66, 89, 52, -56, 5, 22, -70, 99]\ns = Solution()\nprint(s.findDifference(nums1, nums2))",
        "detail": "2215.find-the-difference-of-two-arrays.2215.find-the-difference-of-two-arrays",
        "documentation": {}
    },
    {
        "label": "nums1",
        "kind": 5,
        "importPath": "2215.find-the-difference-of-two-arrays.2215.find-the-difference-of-two-arrays",
        "description": "2215.find-the-difference-of-two-arrays.2215.find-the-difference-of-two-arrays",
        "peekOfCode": "nums1 = [52, -21]\nnums2 = [22, 66, 89, 52, -56, 5, 22, -70, 99]\ns = Solution()\nprint(s.findDifference(nums1, nums2))",
        "detail": "2215.find-the-difference-of-two-arrays.2215.find-the-difference-of-two-arrays",
        "documentation": {}
    },
    {
        "label": "nums2",
        "kind": 5,
        "importPath": "2215.find-the-difference-of-two-arrays.2215.find-the-difference-of-two-arrays",
        "description": "2215.find-the-difference-of-two-arrays.2215.find-the-difference-of-two-arrays",
        "peekOfCode": "nums2 = [22, 66, 89, 52, -56, 5, 22, -70, 99]\ns = Solution()\nprint(s.findDifference(nums1, nums2))",
        "detail": "2215.find-the-difference-of-two-arrays.2215.find-the-difference-of-two-arrays",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "2215.find-the-difference-of-two-arrays.2215.find-the-difference-of-two-arrays",
        "description": "2215.find-the-difference-of-two-arrays.2215.find-the-difference-of-two-arrays",
        "peekOfCode": "s = Solution()\nprint(s.findDifference(nums1, nums2))",
        "detail": "2215.find-the-difference-of-two-arrays.2215.find-the-difference-of-two-arrays",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "2218.maximum-value-of-k-coins-from-piles.2218.maximum-value-of-k-coins-from-piles",
        "description": "2218.maximum-value-of-k-coins-from-piles.2218.maximum-value-of-k-coins-from-piles",
        "peekOfCode": "class Solution:\n    def maxValueOfCoins(self, piles: List[List[int]], K: int) -> int:\n        N = len(piles)\n        @lru_cache(None)\n        def f(i, k):\n            if i == N:\n                return 0\n            res, s = f(i + 1, k), 0\n            for j in range(min(k, len(piles[i]))):\n                s += piles[i][j]",
        "detail": "2218.maximum-value-of-k-coins-from-piles.2218.maximum-value-of-k-coins-from-piles",
        "documentation": {}
    },
    {
        "label": "piles",
        "kind": 5,
        "importPath": "2218.maximum-value-of-k-coins-from-piles.2218.maximum-value-of-k-coins-from-piles",
        "description": "2218.maximum-value-of-k-coins-from-piles.2218.maximum-value-of-k-coins-from-piles",
        "peekOfCode": "piles = [[100], [100], [100], [100], [100], [100], [1, 1, 1, 1, 1, 1, 700]]\nk = 7\ns = Solution()\nprint(s.maxValueOfCoins(piles,k))",
        "detail": "2218.maximum-value-of-k-coins-from-piles.2218.maximum-value-of-k-coins-from-piles",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "2218.maximum-value-of-k-coins-from-piles.2218.maximum-value-of-k-coins-from-piles",
        "description": "2218.maximum-value-of-k-coins-from-piles.2218.maximum-value-of-k-coins-from-piles",
        "peekOfCode": "k = 7\ns = Solution()\nprint(s.maxValueOfCoins(piles,k))",
        "detail": "2218.maximum-value-of-k-coins-from-piles.2218.maximum-value-of-k-coins-from-piles",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "2218.maximum-value-of-k-coins-from-piles.2218.maximum-value-of-k-coins-from-piles",
        "description": "2218.maximum-value-of-k-coins-from-piles.2218.maximum-value-of-k-coins-from-piles",
        "peekOfCode": "s = Solution()\nprint(s.maxValueOfCoins(piles,k))",
        "detail": "2218.maximum-value-of-k-coins-from-piles.2218.maximum-value-of-k-coins-from-piles",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "description": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "peekOfCode": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        import heapq\n        heap = []\n        for i, node in enumerate(lists):\n            if node:",
        "detail": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "description": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "peekOfCode": "class Solution:\n    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:\n        import heapq\n        heap = []\n        for i, node in enumerate(lists):\n            if node:\n                heap.append((node.val, i, node))\n        heapq.heapify(heap)\n        dummy = ListNode(0)\n        tail = dummy",
        "detail": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "documentation": {}
    },
    {
        "label": "lists",
        "kind": 5,
        "importPath": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "description": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "peekOfCode": "lists = [\n    ListNode(1, ListNode(2, ListNode(3))),\n    ListNode(4, ListNode(5, ListNode(6, ListNode(7))))\n]\nlists2 = [\n    ListNode(1, ListNode(4, ListNode(5))),\n    ListNode(1, ListNode(3, ListNode(4))),\n    ListNode(2, ListNode(6))\n]\nlists3 = [",
        "detail": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "documentation": {}
    },
    {
        "label": "lists2",
        "kind": 5,
        "importPath": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "description": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "peekOfCode": "lists2 = [\n    ListNode(1, ListNode(4, ListNode(5))),\n    ListNode(1, ListNode(3, ListNode(4))),\n    ListNode(2, ListNode(6))\n]\nlists3 = [\n    ListNode(1, ListNode(4, ListNode(5))),\n    ListNode(0, ListNode(2))\n]\ns = Solution()",
        "detail": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "documentation": {}
    },
    {
        "label": "lists3",
        "kind": 5,
        "importPath": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "description": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "peekOfCode": "lists3 = [\n    ListNode(1, ListNode(4, ListNode(5))),\n    ListNode(0, ListNode(2))\n]\ns = Solution()\na = s.mergeKLists(lists3)\nwhile a:\n    print(a.val)\n    a = a.next",
        "detail": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "description": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "peekOfCode": "s = Solution()\na = s.mergeKLists(lists3)\nwhile a:\n    print(a.val)\n    a = a.next",
        "detail": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "description": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "peekOfCode": "a = s.mergeKLists(lists3)\nwhile a:\n    print(a.val)\n    a = a.next",
        "detail": "23.merge-k-sorted-lists.23.merge-k-sorted-lists",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph.2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph",
        "description": "2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph.2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph",
        "peekOfCode": "class Solution:\n    def countPairs(self, n: int, edges: List[List[int]]) -> int:\n        side = defaultdict(list)\n        for n1, n2 in edges:\n            side[n1].append(n2)\n            side[n2].append(n1)\n        visited = [False] * n\n        res, factor = 0, 0\n        for i in range(n):\n            if not visited[i]:",
        "detail": "2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph.2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph.2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph",
        "description": "2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph.2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph",
        "peekOfCode": "n = 7\nedges = [[0,2],[0,5],[2,4],[1,6],[5,4]]\ns = Solution()\nprint(s.countPairs(n, edges))",
        "detail": "2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph.2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph.2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph",
        "description": "2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph.2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph",
        "peekOfCode": "edges = [[0,2],[0,5],[2,4],[1,6],[5,4]]\ns = Solution()\nprint(s.countPairs(n, edges))",
        "detail": "2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph.2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph.2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph",
        "description": "2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph.2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph",
        "peekOfCode": "s = Solution()\nprint(s.countPairs(n, edges))",
        "detail": "2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph.2316.count-unreachable-pairs-of-nodes-in-an-undirected-graph",
        "documentation": {}
    },
    {
        "label": "SmallestInfiniteSet",
        "kind": 6,
        "importPath": "2336.smallest-number-in-infinite-set.2336.smallest-number-in-infinite-set",
        "description": "2336.smallest-number-in-infinite-set.2336.smallest-number-in-infinite-set",
        "peekOfCode": "class SmallestInfiniteSet:\n    def __init__(self):\n        self.smallest_inf = 1\n        self.h = []\n        self.sms = set()\n    def popSmallest(self) -> int:\n        if len(self.h) > 0:\n            self.sms.remove(self.h[0])\n            return heappop(self.h)\n        else:",
        "detail": "2336.smallest-number-in-infinite-set.2336.smallest-number-in-infinite-set",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "2348.number-of-zero-filled-subarrays.2348.number-of-zero-filled-subarrays",
        "description": "2348.number-of-zero-filled-subarrays.2348.number-of-zero-filled-subarrays",
        "peekOfCode": "class Solution:\n    def zeroFilledSubarray(self, nums: List[int]) -> int:\n        count = 0\n        res = 0\n        for num in nums:\n            if num == 0:\n                count += 1\n                res += count\n            else:\n                count = 0",
        "detail": "2348.number-of-zero-filled-subarrays.2348.number-of-zero-filled-subarrays",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "2348.number-of-zero-filled-subarrays.2348.number-of-zero-filled-subarrays",
        "description": "2348.number-of-zero-filled-subarrays.2348.number-of-zero-filled-subarrays",
        "peekOfCode": "nums = [2,10,2019]\ns = Solution()\nprint(s.zeroFilledSubarray(nums))",
        "detail": "2348.number-of-zero-filled-subarrays.2348.number-of-zero-filled-subarrays",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "2348.number-of-zero-filled-subarrays.2348.number-of-zero-filled-subarrays",
        "description": "2348.number-of-zero-filled-subarrays.2348.number-of-zero-filled-subarrays",
        "peekOfCode": "s = Solution()\nprint(s.zeroFilledSubarray(nums))",
        "detail": "2348.number-of-zero-filled-subarrays.2348.number-of-zero-filled-subarrays",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "2360.longest-cycle-in-a-graph.2360.longest-cycle-in-a-graph",
        "description": "2360.longest-cycle-in-a-graph.2360.longest-cycle-in-a-graph",
        "peekOfCode": "class Solution:\n    def longestCycle(self, edges: List[int]) -> int:\n        visited = [0] * len(edges)\n        order, ans = 1, -1\n        for node, visit in enumerate(visited):\n            if visit:\n                continue\n            start_visited = order\n            while node >= 0:\n                if visited[node]:",
        "detail": "2360.longest-cycle-in-a-graph.2360.longest-cycle-in-a-graph",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "2360.longest-cycle-in-a-graph.2360.longest-cycle-in-a-graph",
        "description": "2360.longest-cycle-in-a-graph.2360.longest-cycle-in-a-graph",
        "peekOfCode": "edges = [3,3,4,2,3]\ns = Solution()\nprint(s.longestCycle(edges))",
        "detail": "2360.longest-cycle-in-a-graph.2360.longest-cycle-in-a-graph",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "2360.longest-cycle-in-a-graph.2360.longest-cycle-in-a-graph",
        "description": "2360.longest-cycle-in-a-graph.2360.longest-cycle-in-a-graph",
        "peekOfCode": "s = Solution()\nprint(s.longestCycle(edges))",
        "detail": "2360.longest-cycle-in-a-graph.2360.longest-cycle-in-a-graph",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "2390.removing-stars-from-a-string.2390.removing-stars-from-a-string",
        "description": "2390.removing-stars-from-a-string.2390.removing-stars-from-a-string",
        "peekOfCode": "class Solution:\n    def removeStars(self, s: str) -> str:\n        res = []\n        for i in s:\n            if i == \"*\":\n                res.pop()\n            else:\n                res.append(i)\n        return \"\".join(res)\ns = \"erase*****\"",
        "detail": "2390.removing-stars-from-a-string.2390.removing-stars-from-a-string",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "2390.removing-stars-from-a-string.2390.removing-stars-from-a-string",
        "description": "2390.removing-stars-from-a-string.2390.removing-stars-from-a-string",
        "peekOfCode": "s = \"erase*****\"\nsolution = Solution()\nprint(solution.removeStars(s))",
        "detail": "2390.removing-stars-from-a-string.2390.removing-stars-from-a-string",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 5,
        "importPath": "2390.removing-stars-from-a-string.2390.removing-stars-from-a-string",
        "description": "2390.removing-stars-from-a-string.2390.removing-stars-from-a-string",
        "peekOfCode": "solution = Solution()\nprint(solution.removeStars(s))",
        "detail": "2390.removing-stars-from-a-string.2390.removing-stars-from-a-string",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "24.swap-nodes-in-pairs.24.swap-nodes-in-pairs",
        "description": "24.swap-nodes-in-pairs.24.swap-nodes-in-pairs",
        "peekOfCode": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        dummy = ListNode(-1)\n        dummy.next = head\n        prev = dummy\n        while head and head.next:",
        "detail": "24.swap-nodes-in-pairs.24.swap-nodes-in-pairs",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "24.swap-nodes-in-pairs.24.swap-nodes-in-pairs",
        "description": "24.swap-nodes-in-pairs.24.swap-nodes-in-pairs",
        "peekOfCode": "class Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        dummy = ListNode(-1)\n        dummy.next = head\n        prev = dummy\n        while head and head.next:\n            first = head\n            second = head.next\n            prev.next = second\n            first.next = second.next",
        "detail": "24.swap-nodes-in-pairs.24.swap-nodes-in-pairs",
        "documentation": {}
    },
    {
        "label": "head",
        "kind": 5,
        "importPath": "24.swap-nodes-in-pairs.24.swap-nodes-in-pairs",
        "description": "24.swap-nodes-in-pairs.24.swap-nodes-in-pairs",
        "peekOfCode": "head = ListNode(1, ListNode(2, ListNode(3, ListNode(4))))\ns = Solution()\nprint(s.swapPairs(head))",
        "detail": "24.swap-nodes-in-pairs.24.swap-nodes-in-pairs",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "24.swap-nodes-in-pairs.24.swap-nodes-in-pairs",
        "description": "24.swap-nodes-in-pairs.24.swap-nodes-in-pairs",
        "peekOfCode": "s = Solution()\nprint(s.swapPairs(head))",
        "detail": "24.swap-nodes-in-pairs.24.swap-nodes-in-pairs",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "2405.optimal-partition-of-string.2405.optimal-partition-of-string",
        "description": "2405.optimal-partition-of-string.2405.optimal-partition-of-string",
        "peekOfCode": "class Solution:\n    def partitionString(self, s: str) -> int:\n        st = []\n        running = \"\" \n        for c in s: \n            if c in running: \n                st += [running] \n                running = \"\"\n            running += c\n        return len(st) + 1",
        "detail": "2405.optimal-partition-of-string.2405.optimal-partition-of-string",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "2405.optimal-partition-of-string.2405.optimal-partition-of-string",
        "description": "2405.optimal-partition-of-string.2405.optimal-partition-of-string",
        "peekOfCode": "s = \"ssssss\"\nsolution = Solution()\nprint(solution.partitionString(s))",
        "detail": "2405.optimal-partition-of-string.2405.optimal-partition-of-string",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 5,
        "importPath": "2405.optimal-partition-of-string.2405.optimal-partition-of-string",
        "description": "2405.optimal-partition-of-string.2405.optimal-partition-of-string",
        "peekOfCode": "solution = Solution()\nprint(solution.partitionString(s))",
        "detail": "2405.optimal-partition-of-string.2405.optimal-partition-of-string",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "2439.minimize-maximum-of-array.2439.minimize-maximum-of-array",
        "description": "2439.minimize-maximum-of-array.2439.minimize-maximum-of-array",
        "peekOfCode": "class Solution:\n    def minimizeArrayValue(self, nums: List[int]) -> int:\n        max_ave = 0\n        sum_num = 0 \n        for i in range(len(nums)):\n            sum_num+=nums[i]\n            if sum_num/(i+1) > max_ave:\n                max_ave = ceil(sum_num/(i+1))\n        return max_ave\nnums = [3,7,1,6]",
        "detail": "2439.minimize-maximum-of-array.2439.minimize-maximum-of-array",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "2439.minimize-maximum-of-array.2439.minimize-maximum-of-array",
        "description": "2439.minimize-maximum-of-array.2439.minimize-maximum-of-array",
        "peekOfCode": "nums = [3,7,1,6]\ns = Solution()\nprint(s.minimizeArrayValue(nums))",
        "detail": "2439.minimize-maximum-of-array.2439.minimize-maximum-of-array",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "2439.minimize-maximum-of-array.2439.minimize-maximum-of-array",
        "description": "2439.minimize-maximum-of-array.2439.minimize-maximum-of-array",
        "peekOfCode": "s = Solution()\nprint(s.minimizeArrayValue(nums))",
        "detail": "2439.minimize-maximum-of-array.2439.minimize-maximum-of-array",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "2444.count-subarrays-with-fixed-bounds.2444.count-subarrays-with-fixed-bounds",
        "description": "2444.count-subarrays-with-fixed-bounds.2444.count-subarrays-with-fixed-bounds",
        "peekOfCode": "class Solution:\n    def countSubarrays(self, nums: List[int], minK: int, maxK: int) -> int:\n        start, leftBound, iMax, iMin, res = -1, -1, -1, -1, 0\n        for i, num in enumerate(nums):\n            if num > maxK or num < minK:\n                start = i\n            if num == minK:\n                iMin = i\n                leftBound = min(iMax, iMin)\n            if num == maxK:",
        "detail": "2444.count-subarrays-with-fixed-bounds.2444.count-subarrays-with-fixed-bounds",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "2444.count-subarrays-with-fixed-bounds.2444.count-subarrays-with-fixed-bounds",
        "description": "2444.count-subarrays-with-fixed-bounds.2444.count-subarrays-with-fixed-bounds",
        "peekOfCode": "nums = [1,3,5,2,7,5]\nminK = 1\nmaxK = 5\ns = Solution()\nprint(s.countSubarrays(nums, minK, maxK))",
        "detail": "2444.count-subarrays-with-fixed-bounds.2444.count-subarrays-with-fixed-bounds",
        "documentation": {}
    },
    {
        "label": "minK",
        "kind": 5,
        "importPath": "2444.count-subarrays-with-fixed-bounds.2444.count-subarrays-with-fixed-bounds",
        "description": "2444.count-subarrays-with-fixed-bounds.2444.count-subarrays-with-fixed-bounds",
        "peekOfCode": "minK = 1\nmaxK = 5\ns = Solution()\nprint(s.countSubarrays(nums, minK, maxK))",
        "detail": "2444.count-subarrays-with-fixed-bounds.2444.count-subarrays-with-fixed-bounds",
        "documentation": {}
    },
    {
        "label": "maxK",
        "kind": 5,
        "importPath": "2444.count-subarrays-with-fixed-bounds.2444.count-subarrays-with-fixed-bounds",
        "description": "2444.count-subarrays-with-fixed-bounds.2444.count-subarrays-with-fixed-bounds",
        "peekOfCode": "maxK = 5\ns = Solution()\nprint(s.countSubarrays(nums, minK, maxK))",
        "detail": "2444.count-subarrays-with-fixed-bounds.2444.count-subarrays-with-fixed-bounds",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "2444.count-subarrays-with-fixed-bounds.2444.count-subarrays-with-fixed-bounds",
        "description": "2444.count-subarrays-with-fixed-bounds.2444.count-subarrays-with-fixed-bounds",
        "peekOfCode": "s = Solution()\nprint(s.countSubarrays(nums, minK, maxK))",
        "detail": "2444.count-subarrays-with-fixed-bounds.2444.count-subarrays-with-fixed-bounds",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "2542.maximum-subsequence-score.2542.maximum-subsequence-score",
        "description": "2542.maximum-subsequence-score.2542.maximum-subsequence-score",
        "peekOfCode": "class Solution:\n    def maxScore(self, nums1, nums2, k):\n        total = res = 0\n        heap = []\n        pairs = zip(nums1, nums2)\n        sorted_pairs = sorted(pairs, key=lambda x: -x[1])\n        for pair in sorted_pairs:\n            num1, num2 = pair\n            heappush(heap, num1)\n            total += num1",
        "detail": "2542.maximum-subsequence-score.2542.maximum-subsequence-score",
        "documentation": {}
    },
    {
        "label": "nums1",
        "kind": 5,
        "importPath": "2542.maximum-subsequence-score.2542.maximum-subsequence-score",
        "description": "2542.maximum-subsequence-score.2542.maximum-subsequence-score",
        "peekOfCode": "nums1 = [1, 3, 3, 2]\nnums2 = [2, 1, 3, 4]\nk = 3\ns = Solution()\nprint(s.maxScore(nums1, nums2, k))",
        "detail": "2542.maximum-subsequence-score.2542.maximum-subsequence-score",
        "documentation": {}
    },
    {
        "label": "nums2",
        "kind": 5,
        "importPath": "2542.maximum-subsequence-score.2542.maximum-subsequence-score",
        "description": "2542.maximum-subsequence-score.2542.maximum-subsequence-score",
        "peekOfCode": "nums2 = [2, 1, 3, 4]\nk = 3\ns = Solution()\nprint(s.maxScore(nums1, nums2, k))",
        "detail": "2542.maximum-subsequence-score.2542.maximum-subsequence-score",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "2542.maximum-subsequence-score.2542.maximum-subsequence-score",
        "description": "2542.maximum-subsequence-score.2542.maximum-subsequence-score",
        "peekOfCode": "k = 3\ns = Solution()\nprint(s.maxScore(nums1, nums2, k))",
        "detail": "2542.maximum-subsequence-score.2542.maximum-subsequence-score",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "2542.maximum-subsequence-score.2542.maximum-subsequence-score",
        "description": "2542.maximum-subsequence-score.2542.maximum-subsequence-score",
        "peekOfCode": "s = Solution()\nprint(s.maxScore(nums1, nums2, k))",
        "detail": "2542.maximum-subsequence-score.2542.maximum-subsequence-score",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "258.add-digits.258.add-digits",
        "description": "258.add-digits.258.add-digits",
        "peekOfCode": "class Solution:\n  def addDigits(self, num: int) -> int:\n    if num < 10:\n      return num\n    res = num % 9\n    return res if res else 9\nnum = 20\ns = Solution()\nprint(s.addDigits(num))",
        "detail": "258.add-digits.258.add-digits",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "258.add-digits.258.add-digits",
        "description": "258.add-digits.258.add-digits",
        "peekOfCode": "num = 20\ns = Solution()\nprint(s.addDigits(num))",
        "detail": "258.add-digits.258.add-digits",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "258.add-digits.258.add-digits",
        "description": "258.add-digits.258.add-digits",
        "peekOfCode": "s = Solution()\nprint(s.addDigits(num))",
        "detail": "258.add-digits.258.add-digits",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "28.find-the-index-of-the-first-occurrence-in-a-string.28.find-the-index-of-the-first-occurrence-in-a-string",
        "description": "28.find-the-index-of-the-first-occurrence-in-a-string.28.find-the-index-of-the-first-occurrence-in-a-string",
        "peekOfCode": "class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:\n        # return haystack.find(needle)\n        n1 = len(haystack)\n        n2 = len(needle)\n        def compare(s1: str, s2: str, start: int):\n            for c in s2:\n                if c != s1[start]:\n                    return False\n                else:",
        "detail": "28.find-the-index-of-the-first-occurrence-in-a-string.28.find-the-index-of-the-first-occurrence-in-a-string",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "319.bulb-switcher.319.bulb-switcher",
        "description": "319.bulb-switcher.319.bulb-switcher",
        "peekOfCode": "class Solution:\n    def bulbSwitch(self, n: int) -> int:\n        return int(sqrt(n))\nn = 10**9\ns = Solution()\nprint(s.bulbSwitch(n))",
        "detail": "319.bulb-switcher.319.bulb-switcher",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "319.bulb-switcher.319.bulb-switcher",
        "description": "319.bulb-switcher.319.bulb-switcher",
        "peekOfCode": "n = 10**9\ns = Solution()\nprint(s.bulbSwitch(n))",
        "detail": "319.bulb-switcher.319.bulb-switcher",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "319.bulb-switcher.319.bulb-switcher",
        "description": "319.bulb-switcher.319.bulb-switcher",
        "peekOfCode": "s = Solution()\nprint(s.bulbSwitch(n))",
        "detail": "319.bulb-switcher.319.bulb-switcher",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "347.top-k-frequent-elements.347.top-k-frequent-elements",
        "description": "347.top-k-frequent-elements.347.top-k-frequent-elements",
        "peekOfCode": "class Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        s = Counter(nums)\n        s = sorted(s.items(), key=lambda x: x[1], reverse=True)\n        return [item[0] for item in s[:k]]\nnums = [1,1,1,2,2,3]\nk = 2\ns = Solution()\nprint(s.topKFrequent(nums, k))",
        "detail": "347.top-k-frequent-elements.347.top-k-frequent-elements",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "347.top-k-frequent-elements.347.top-k-frequent-elements",
        "description": "347.top-k-frequent-elements.347.top-k-frequent-elements",
        "peekOfCode": "nums = [1,1,1,2,2,3]\nk = 2\ns = Solution()\nprint(s.topKFrequent(nums, k))",
        "detail": "347.top-k-frequent-elements.347.top-k-frequent-elements",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "347.top-k-frequent-elements.347.top-k-frequent-elements",
        "description": "347.top-k-frequent-elements.347.top-k-frequent-elements",
        "peekOfCode": "k = 2\ns = Solution()\nprint(s.topKFrequent(nums, k))",
        "detail": "347.top-k-frequent-elements.347.top-k-frequent-elements",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "347.top-k-frequent-elements.347.top-k-frequent-elements",
        "description": "347.top-k-frequent-elements.347.top-k-frequent-elements",
        "peekOfCode": "s = Solution()\nprint(s.topKFrequent(nums, k))",
        "detail": "347.top-k-frequent-elements.347.top-k-frequent-elements",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "382.linked-list-random-node.382.linked-list-random-node",
        "description": "382.linked-list-random-node.382.linked-list-random-node",
        "peekOfCode": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    arr = []\n    def __init__(self, head: Optional[ListNode]):\n        self.arr.clear()\n        self.length = 0\n        while head:",
        "detail": "382.linked-list-random-node.382.linked-list-random-node",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "382.linked-list-random-node.382.linked-list-random-node",
        "description": "382.linked-list-random-node.382.linked-list-random-node",
        "peekOfCode": "class Solution:\n    arr = []\n    def __init__(self, head: Optional[ListNode]):\n        self.arr.clear()\n        self.length = 0\n        while head:\n            self.arr.append(head.val)\n            self.length += 1\n            head = head.next\n    def getRandom(self) -> int:",
        "detail": "382.linked-list-random-node.382.linked-list-random-node",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "382.linked-list-random-node.382.linked-list-random-node",
        "description": "382.linked-list-random-node.382.linked-list-random-node",
        "peekOfCode": "a = ListNode(1)\nb = ListNode(2)\nc = ListNode(3)\na.next = b\nb.next = c\nobj = Solution(a)\nprint(obj.arr)\nfor i in range(10):\n    print(obj.getRandom())",
        "detail": "382.linked-list-random-node.382.linked-list-random-node",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "382.linked-list-random-node.382.linked-list-random-node",
        "description": "382.linked-list-random-node.382.linked-list-random-node",
        "peekOfCode": "b = ListNode(2)\nc = ListNode(3)\na.next = b\nb.next = c\nobj = Solution(a)\nprint(obj.arr)\nfor i in range(10):\n    print(obj.getRandom())",
        "detail": "382.linked-list-random-node.382.linked-list-random-node",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "382.linked-list-random-node.382.linked-list-random-node",
        "description": "382.linked-list-random-node.382.linked-list-random-node",
        "peekOfCode": "c = ListNode(3)\na.next = b\nb.next = c\nobj = Solution(a)\nprint(obj.arr)\nfor i in range(10):\n    print(obj.getRandom())",
        "detail": "382.linked-list-random-node.382.linked-list-random-node",
        "documentation": {}
    },
    {
        "label": "a.next",
        "kind": 5,
        "importPath": "382.linked-list-random-node.382.linked-list-random-node",
        "description": "382.linked-list-random-node.382.linked-list-random-node",
        "peekOfCode": "a.next = b\nb.next = c\nobj = Solution(a)\nprint(obj.arr)\nfor i in range(10):\n    print(obj.getRandom())",
        "detail": "382.linked-list-random-node.382.linked-list-random-node",
        "documentation": {}
    },
    {
        "label": "b.next",
        "kind": 5,
        "importPath": "382.linked-list-random-node.382.linked-list-random-node",
        "description": "382.linked-list-random-node.382.linked-list-random-node",
        "peekOfCode": "b.next = c\nobj = Solution(a)\nprint(obj.arr)\nfor i in range(10):\n    print(obj.getRandom())",
        "detail": "382.linked-list-random-node.382.linked-list-random-node",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "382.linked-list-random-node.382.linked-list-random-node",
        "description": "382.linked-list-random-node.382.linked-list-random-node",
        "peekOfCode": "obj = Solution(a)\nprint(obj.arr)\nfor i in range(10):\n    print(obj.getRandom())",
        "detail": "382.linked-list-random-node.382.linked-list-random-node",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "399.evaluate-division.399.evaluate-division",
        "description": "399.evaluate-division.399.evaluate-division",
        "peekOfCode": "class Solution:\n    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:\n        def dfs(x, y, graph, visited):\n            if x == y:\n                return 1.0\n            visited.add(x)\n            for neighbor in graph[x]:\n                if neighbor not in visited:\n                    quotient = graph[x][neighbor]\n                    sub_quotient = dfs(neighbor, y, graph, visited)",
        "detail": "399.evaluate-division.399.evaluate-division",
        "documentation": {}
    },
    {
        "label": "equations",
        "kind": 5,
        "importPath": "399.evaluate-division.399.evaluate-division",
        "description": "399.evaluate-division.399.evaluate-division",
        "peekOfCode": "equations = [[\"a\",\"b\"],[\"b\",\"c\"]]\nvalues = [2.0,3.0]\nqueries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\ns = Solution()\nprint(s.calcEquation(equations, values, queries))",
        "detail": "399.evaluate-division.399.evaluate-division",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "399.evaluate-division.399.evaluate-division",
        "description": "399.evaluate-division.399.evaluate-division",
        "peekOfCode": "values = [2.0,3.0]\nqueries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\ns = Solution()\nprint(s.calcEquation(equations, values, queries))",
        "detail": "399.evaluate-division.399.evaluate-division",
        "documentation": {}
    },
    {
        "label": "queries",
        "kind": 5,
        "importPath": "399.evaluate-division.399.evaluate-division",
        "description": "399.evaluate-division.399.evaluate-division",
        "peekOfCode": "queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\ns = Solution()\nprint(s.calcEquation(equations, values, queries))",
        "detail": "399.evaluate-division.399.evaluate-division",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "399.evaluate-division.399.evaluate-division",
        "description": "399.evaluate-division.399.evaluate-division",
        "peekOfCode": "s = Solution()\nprint(s.calcEquation(equations, values, queries))",
        "detail": "399.evaluate-division.399.evaluate-division",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "427.construct-quad-tree.construct-quad-tree",
        "description": "427.construct-quad-tree.construct-quad-tree",
        "peekOfCode": "class Node:\n    def __init__(self, val, isLeaf, topLeft, topRight, bottomLeft, bottomRight):\n        self.val = val\n        self.isLeaf = isLeaf\n        self.topLeft = topLeft\n        self.topRight = topRight\n        self.bottomLeft = bottomLeft\n        self.bottomRight = bottomRight\nclass Solution:\n    def construct(self, grid: List[List[int]]) -> 'Node':",
        "detail": "427.construct-quad-tree.construct-quad-tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "427.construct-quad-tree.construct-quad-tree",
        "description": "427.construct-quad-tree.construct-quad-tree",
        "peekOfCode": "class Solution:\n    def construct(self, grid: List[List[int]]) -> 'Node':\n        n = len(grid)\n        total = sum([sum(row) for row in grid])\n        if total == 0 or total == n * n:\n            return Node(0 if total == 0 else 1, 1, None, None, None, None)\n        mid = n >> 1\n        topLeft = [row[:mid] for row in grid[:mid]]\n        topRight = [row[mid:] for row in grid[:mid]]\n        bottomLeft = [row[:mid] for row in grid[mid:]]",
        "detail": "427.construct-quad-tree.construct-quad-tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "443.string-compression.433.string-compression",
        "description": "443.string-compression.433.string-compression",
        "peekOfCode": "class Solution:\n    def compress(self, chars: List[str]) -> int:\n        n = len(chars)\n        if n==0:\n            return 0\n        walker = 1\n        count = 1\n        check = chars[0]\n        for i in range(1, n):\n            if chars[i] == check:",
        "detail": "443.string-compression.433.string-compression",
        "documentation": {}
    },
    {
        "label": "chars",
        "kind": 5,
        "importPath": "443.string-compression.433.string-compression",
        "description": "443.string-compression.433.string-compression",
        "peekOfCode": "chars = [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]\ns = Solution()\nprint(s.compress(chars))",
        "detail": "443.string-compression.433.string-compression",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "443.string-compression.433.string-compression",
        "description": "443.string-compression.433.string-compression",
        "peekOfCode": "s = Solution()\nprint(s.compress(chars))",
        "detail": "443.string-compression.433.string-compression",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "516.longest-palindromic-subsequence.516.longest-palindromic-subsequence",
        "description": "516.longest-palindromic-subsequence.516.longest-palindromic-subsequence",
        "peekOfCode": "class Solution:\n    def longestPalindromeSubseq(self, s: str) -> int:\n        n = len(s)\n        dp = [0] * n\n        for i in range(n-1, -1, -1):\n            newdp = [0] * n\n            newdp[i] = 1\n            for j in range(i+1, n):\n                if s[i] == s[j]:\n                    newdp[j] = 2 + dp[j-1]",
        "detail": "516.longest-palindromic-subsequence.516.longest-palindromic-subsequence",
        "documentation": {}
    },
    {
        "label": "solution",
        "kind": 5,
        "importPath": "516.longest-palindromic-subsequence.516.longest-palindromic-subsequence",
        "description": "516.longest-palindromic-subsequence.516.longest-palindromic-subsequence",
        "peekOfCode": "solution = Solution()\nprint(solution.longestPalindromeSubseq(s))",
        "detail": "516.longest-palindromic-subsequence.516.longest-palindromic-subsequence",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "54.spiral-matrix.54.spiral-matrix",
        "description": "54.spiral-matrix.54.spiral-matrix",
        "peekOfCode": "class Solution:\n    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:\n        res = []\n        i, j = 0, 0\n        m, n = len(matrix), len(matrix[0])\n        while i < m-1 and j < n - 1:\n            res += matrix[i][j:n]\n            for k in range(i + 1, m - 1):\n                res.append(matrix[k][n-1])\n            tmp = matrix[m-1][j:n]",
        "detail": "54.spiral-matrix.54.spiral-matrix",
        "documentation": {}
    },
    {
        "label": "matrix",
        "kind": 5,
        "importPath": "54.spiral-matrix.54.spiral-matrix",
        "description": "54.spiral-matrix.54.spiral-matrix",
        "peekOfCode": "matrix = [[1, 11], [2, 12], [3, 13], [4, 14], [5, 15],\n          [6, 16], [7, 17], [8, 18], [9, 19], [10, 20]]\ns = Solution()\nprint(s.spiralOrder(matrix))",
        "detail": "54.spiral-matrix.54.spiral-matrix",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "54.spiral-matrix.54.spiral-matrix",
        "description": "54.spiral-matrix.54.spiral-matrix",
        "peekOfCode": "s = Solution()\nprint(s.spiralOrder(matrix))",
        "detail": "54.spiral-matrix.54.spiral-matrix",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "59.spiral-matrix-ii.59.spiral-matrix-ii",
        "description": "59.spiral-matrix-ii.59.spiral-matrix-ii",
        "peekOfCode": "class Solution:\n    def generateMatrix(self, n: int) -> List[List[int]]:\n        res = [[0 for _ in range(n)] for _ in range(n)]\n        i, j = 0, 0\n        start = 1\n        res[i][j] = start\n        start += 1\n        while start <= n * n:\n            while j + 1 < n and res[i][j + 1] == 0:\n                j += 1",
        "detail": "59.spiral-matrix-ii.59.spiral-matrix-ii",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "59.spiral-matrix-ii.59.spiral-matrix-ii",
        "description": "59.spiral-matrix-ii.59.spiral-matrix-ii",
        "peekOfCode": "n = 3\ns = Solution()\nprint(s.generateMatrix(n))",
        "detail": "59.spiral-matrix-ii.59.spiral-matrix-ii",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "59.spiral-matrix-ii.59.spiral-matrix-ii",
        "description": "59.spiral-matrix-ii.59.spiral-matrix-ii",
        "peekOfCode": "s = Solution()\nprint(s.generateMatrix(n))",
        "detail": "59.spiral-matrix-ii.59.spiral-matrix-ii",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "605.can-place-flowers.605.can-place-flowers",
        "description": "605.can-place-flowers.605.can-place-flowers",
        "peekOfCode": "class Solution:\n    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:\n        zeros, ans = 1, 0  \n        for plot in flowerbed:\n            if plot == 0: \n                zeros += 1\n            else:\n                ans += (zeros - 1) // 2\n                zeros = 0\n        return ans + zeros // 2 >= n ",
        "detail": "605.can-place-flowers.605.can-place-flowers",
        "documentation": {}
    },
    {
        "label": "flowerbed",
        "kind": 5,
        "importPath": "605.can-place-flowers.605.can-place-flowers",
        "description": "605.can-place-flowers.605.can-place-flowers",
        "peekOfCode": "flowerbed = [1,0,0,0,1,0,0]\nn = 2\ns = Solution()\nprint(s.canPlaceFlowers(flowerbed, n))",
        "detail": "605.can-place-flowers.605.can-place-flowers",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "605.can-place-flowers.605.can-place-flowers",
        "description": "605.can-place-flowers.605.can-place-flowers",
        "peekOfCode": "n = 2\ns = Solution()\nprint(s.canPlaceFlowers(flowerbed, n))",
        "detail": "605.can-place-flowers.605.can-place-flowers",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "605.can-place-flowers.605.can-place-flowers",
        "description": "605.can-place-flowers.605.can-place-flowers",
        "peekOfCode": "s = Solution()\nprint(s.canPlaceFlowers(flowerbed, n))",
        "detail": "605.can-place-flowers.605.can-place-flowers",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "64.minimum-path-sum.64.minimum-path-sum",
        "description": "64.minimum-path-sum.64.minimum-path-sum",
        "peekOfCode": "class Solution:\n    def minPathSum(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        m = len(grid[0])\n        for i in range(1, m):\n            grid[0][i] = grid[0][i-1] + grid[0][i]\n        for i in range(1, n):\n            grid[i][0] = grid[i-1][0] + grid[i][0]\n        for i in range(1, n):\n            for j in range(1, m):",
        "detail": "64.minimum-path-sum.64.minimum-path-sum",
        "documentation": {}
    },
    {
        "label": "grid",
        "kind": 5,
        "importPath": "64.minimum-path-sum.64.minimum-path-sum",
        "description": "64.minimum-path-sum.64.minimum-path-sum",
        "peekOfCode": "grid = [[7,4,8,7,9,3,7,5,0],[1,8,2,2,7,1,4,5,7],[4,6,4,7,7,4,8,2,1],[1,9,6,9,8,2,9,7,2],[5,5,7,5,8,7,9,1,4],[0,7,9,9,1,5,3,9,4]]\ns = Solution()\nprint(s.minPathSum(grid))",
        "detail": "64.minimum-path-sum.64.minimum-path-sum",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "64.minimum-path-sum.64.minimum-path-sum",
        "description": "64.minimum-path-sum.64.minimum-path-sum",
        "peekOfCode": "s = Solution()\nprint(s.minPathSum(grid))",
        "detail": "64.minimum-path-sum.64.minimum-path-sum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "649.dota2-senate.649.dota2-senate",
        "description": "649.dota2-senate.649.dota2-senate",
        "peekOfCode": "class Solution:\n    def predictPartyVictory(self, senate: str) -> str:\n        n = len(senate)\n        s, banned = set(), [False] * n\n        ban_d, ban_r = 0, 0\n        while len(s) != 1:\n            s = set()\n            for i, p in enumerate(senate):\n                if banned[i]:\n                    continue",
        "detail": "649.dota2-senate.649.dota2-senate",
        "documentation": {}
    },
    {
        "label": "senate",
        "kind": 5,
        "importPath": "649.dota2-senate.649.dota2-senate",
        "description": "649.dota2-senate.649.dota2-senate",
        "peekOfCode": "senate = \"RDDRRRDDDDDRDDRR\"\ns = Solution()\nprint(s.predictPartyVictory(senate))",
        "detail": "649.dota2-senate.649.dota2-senate",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "649.dota2-senate.649.dota2-senate",
        "description": "649.dota2-senate.649.dota2-senate",
        "peekOfCode": "s = Solution()\nprint(s.predictPartyVictory(senate))",
        "detail": "649.dota2-senate.649.dota2-senate",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "652.find-duplicate-subtrees.652.find-duplicate-subtrees",
        "description": "652.find-duplicate-subtrees.652.find-duplicate-subtrees",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\nclass Solution:\n    def findDuplicateSubtrees(self, root: Optional[TreeNode]) -> List[Optional[TreeNode]]:\n        res = []\n        hash_table = {}\n        def recursion(node: Optional[TreeNode]):",
        "detail": "652.find-duplicate-subtrees.652.find-duplicate-subtrees",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "652.find-duplicate-subtrees.652.find-duplicate-subtrees",
        "description": "652.find-duplicate-subtrees.652.find-duplicate-subtrees",
        "peekOfCode": "class Solution:\n    def findDuplicateSubtrees(self, root: Optional[TreeNode]) -> List[Optional[TreeNode]]:\n        res = []\n        hash_table = {}\n        def recursion(node: Optional[TreeNode]):\n            if not node:\n                return '#'\n            left = recursion(node.left)\n            right = recursion(node.right)\n            sub_tree = left + ',' + right + ',' + str(node.val)",
        "detail": "652.find-duplicate-subtrees.652.find-duplicate-subtrees",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "662.maximum-width-of-binary-tree.662.maximum-width-of-binary-tree",
        "description": "662.maximum-width-of-binary-tree.662.maximum-width-of-binary-tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\nclass Solution:\n    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        level = deque([(root, 0)])\n        max_width = 0\n        while level:",
        "detail": "662.maximum-width-of-binary-tree.662.maximum-width-of-binary-tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "662.maximum-width-of-binary-tree.662.maximum-width-of-binary-tree",
        "description": "662.maximum-width-of-binary-tree.662.maximum-width-of-binary-tree",
        "peekOfCode": "class Solution:\n    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:\n        level = deque([(root, 0)])\n        max_width = 0\n        while level:\n            _, left = level[0]\n            _, right = level[-1]\n            max_width = max(max_width, right - left + 1)\n            level_length = len(level)\n            for i in range(level_length):",
        "detail": "662.maximum-width-of-binary-tree.662.maximum-width-of-binary-tree",
        "documentation": {}
    },
    {
        "label": "KthLargest",
        "kind": 6,
        "importPath": "703.kth-largest-element-in-a-stream.703.kth-largest-element-a-stream",
        "description": "703.kth-largest-element-in-a-stream.703.kth-largest-element-a-stream",
        "peekOfCode": "class KthLargest:\n    def __init__(self, k: int, nums: List[int]):\n        self.nums = sorted(nums, reverse=True)[:k]\n        self.k = k\n    def add(self, val: int) -> int:\n        if val <= self.nums[-1]:\n            return self.nums[-1]\n        self.nums.pop()\n        left, right = 0, self.k - 2\n        while left < right:",
        "detail": "703.kth-largest-element-in-a-stream.703.kth-largest-element-a-stream",
        "documentation": {}
    },
    {
        "label": "kthLargest",
        "kind": 5,
        "importPath": "703.kth-largest-element-in-a-stream.703.kth-largest-element-a-stream",
        "description": "703.kth-largest-element-in-a-stream.703.kth-largest-element-a-stream",
        "peekOfCode": "kthLargest = KthLargest(3, [4, 5, 8, 2])\nprint(kthLargest.add(3))\nprint(kthLargest.add(5))\nprint(kthLargest.add(10))\nprint(kthLargest.add(9))\nprint(kthLargest.add(4))",
        "detail": "703.kth-largest-element-in-a-stream.703.kth-largest-element-a-stream",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "71.simplify-path.71.simplify-path",
        "description": "71.simplify-path.71.simplify-path",
        "peekOfCode": "class Solution:\n    def simplifyPath(self, path: str) -> str:\n        arr = path.split('/')\n        res = []\n        for word in path.split('/'):\n            if word == '..':\n                if len(res) > 0:\n                    res.pop()\n            elif word and word != '.':\n                res.append(word)",
        "detail": "71.simplify-path.71.simplify-path",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "71.simplify-path.71.simplify-path",
        "description": "71.simplify-path.71.simplify-path",
        "peekOfCode": "path = \"/home//foo/\"\ns = Solution()\nprint(s.simplifyPath(path))",
        "detail": "71.simplify-path.71.simplify-path",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "71.simplify-path.71.simplify-path",
        "description": "71.simplify-path.71.simplify-path",
        "peekOfCode": "s = Solution()\nprint(s.simplifyPath(path))",
        "detail": "71.simplify-path.71.simplify-path",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "785.is-graph-bipartite.785.is-graph-bipartite",
        "description": "785.is-graph-bipartite.785.is-graph-bipartite",
        "peekOfCode": "class Solution:\n    def isBipartite(self, graph: List[List[int]]) -> bool:\n      colors = [-1 for i in range(len(graph))]\n      def dfs(node, color):\n        if colors[node] == color:\n          return True\n        if colors[node] == (color+1) % 2:\n          return False\n        colors[node] = color\n        children = graph[node]",
        "detail": "785.is-graph-bipartite.785.is-graph-bipartite",
        "documentation": {}
    },
    {
        "label": "graph",
        "kind": 5,
        "importPath": "785.is-graph-bipartite.785.is-graph-bipartite",
        "description": "785.is-graph-bipartite.785.is-graph-bipartite",
        "peekOfCode": "graph = [[1], [0, 3], [3], [1, 2]]\ns = Solution()\nprint(s.isBipartite(graph))",
        "detail": "785.is-graph-bipartite.785.is-graph-bipartite",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "785.is-graph-bipartite.785.is-graph-bipartite",
        "description": "785.is-graph-bipartite.785.is-graph-bipartite",
        "peekOfCode": "s = Solution()\nprint(s.isBipartite(graph))",
        "detail": "785.is-graph-bipartite.785.is-graph-bipartite",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "837.new-21-game.837.new-21-game",
        "description": "837.new-21-game.837.new-21-game",
        "peekOfCode": "class Solution:\n    def new21Game(self, n: int, k: int, maxPts: int) -> float:\n        dp = [0.0] * (k + maxPts)\n        for i in range(k, min(n + 1, k + maxPts)):\n            dp[i] = 1.0\n        s = min(n - k + 1, maxPts)\n        for j in range(k - 1, -1, -1):\n            dp[j] = s/float(maxPts)\n            s += dp[j] - dp[j + maxPts]\n        return dp[0]",
        "detail": "837.new-21-game.837.new-21-game",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "837.new-21-game.837.new-21-game",
        "description": "837.new-21-game.837.new-21-game",
        "peekOfCode": "n = 21\nk = 17\nmaxPts = 10\ns = Solution()\nprint(s.new21Game(n, k, maxPts))",
        "detail": "837.new-21-game.837.new-21-game",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "837.new-21-game.837.new-21-game",
        "description": "837.new-21-game.837.new-21-game",
        "peekOfCode": "k = 17\nmaxPts = 10\ns = Solution()\nprint(s.new21Game(n, k, maxPts))",
        "detail": "837.new-21-game.837.new-21-game",
        "documentation": {}
    },
    {
        "label": "maxPts",
        "kind": 5,
        "importPath": "837.new-21-game.837.new-21-game",
        "description": "837.new-21-game.837.new-21-game",
        "peekOfCode": "maxPts = 10\ns = Solution()\nprint(s.new21Game(n, k, maxPts))",
        "detail": "837.new-21-game.837.new-21-game",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "837.new-21-game.837.new-21-game",
        "description": "837.new-21-game.837.new-21-game",
        "peekOfCode": "s = Solution()\nprint(s.new21Game(n, k, maxPts))",
        "detail": "837.new-21-game.837.new-21-game",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "87.scramble-string.87.scramble-string",
        "description": "87.scramble-string.87.scramble-string",
        "peekOfCode": "class Solution:\n    def isScramble(self, s1: str, s2: str) -> bool:\n        n = len(s1)\n        dp = [[[False for _ in range(n)] for _ in range(n)] for _ in range(n+1)]\n        for i in range(n):\n            for j in range(n):\n                dp[1][i][j] = s1[i] == s2[j]\n        for length in range(2, n+1):\n            for i in range(n+1-length):\n                for j in range(n+1-length):",
        "detail": "87.scramble-string.87.scramble-string",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "87.scramble-string.87.scramble-string",
        "description": "87.scramble-string.87.scramble-string",
        "peekOfCode": "s1 = \"abcdbdacbdac\"\ns2 = \"bdacabcdbdac\"\ns = Solution()\nprint(s.isScramble(s1, s2))",
        "detail": "87.scramble-string.87.scramble-string",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "87.scramble-string.87.scramble-string",
        "description": "87.scramble-string.87.scramble-string",
        "peekOfCode": "s2 = \"bdacabcdbdac\"\ns = Solution()\nprint(s.isScramble(s1, s2))",
        "detail": "87.scramble-string.87.scramble-string",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "87.scramble-string.87.scramble-string",
        "description": "87.scramble-string.87.scramble-string",
        "peekOfCode": "s = Solution()\nprint(s.isScramble(s1, s2))",
        "detail": "87.scramble-string.87.scramble-string",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "875.koko-eating-bananas.875.koko-eating-bananas",
        "description": "875.koko-eating-bananas.875.koko-eating-bananas",
        "peekOfCode": "class Solution:\n    def minEatingSpeed(self, piles: List[int], h: int) -> int:\n        def check(k: int):\n            res = 0\n            for pile in piles:\n                res += ceil(pile / k)\n            return res <= h\n        low, high = 1, max(piles)\n        while high > low:\n            mid = (high + low) >> 1",
        "detail": "875.koko-eating-bananas.875.koko-eating-bananas",
        "documentation": {}
    },
    {
        "label": "piles",
        "kind": 5,
        "importPath": "875.koko-eating-bananas.875.koko-eating-bananas",
        "description": "875.koko-eating-bananas.875.koko-eating-bananas",
        "peekOfCode": "piles = [3,6,7,11]\nh = 8\ns = Solution()\nprint(s.minEatingSpeed(piles, h))",
        "detail": "875.koko-eating-bananas.875.koko-eating-bananas",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "875.koko-eating-bananas.875.koko-eating-bananas",
        "description": "875.koko-eating-bananas.875.koko-eating-bananas",
        "peekOfCode": "h = 8\ns = Solution()\nprint(s.minEatingSpeed(piles, h))",
        "detail": "875.koko-eating-bananas.875.koko-eating-bananas",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "875.koko-eating-bananas.875.koko-eating-bananas",
        "description": "875.koko-eating-bananas.875.koko-eating-bananas",
        "peekOfCode": "s = Solution()\nprint(s.minEatingSpeed(piles, h))",
        "detail": "875.koko-eating-bananas.875.koko-eating-bananas",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "879.profitable-schemes.879.profitable-schemes",
        "description": "879.profitable-schemes.879.profitable-schemes",
        "peekOfCode": "class Solution:\n    def profitableSchemes(self, n: int, minProfit: int, group: List[int], profit: List[int]) -> int:\n        mod = int(1e9) + 7\n        dp = [[0] * (minProfit + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        for k in range(1, len(group) + 1):\n            g = group[k - 1]\n            p = profit[k - 1]\n            for i in range(n, g - 1, -1):\n                for j in range(minProfit, -1, -1):",
        "detail": "879.profitable-schemes.879.profitable-schemes",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "879.profitable-schemes.879.profitable-schemes",
        "description": "879.profitable-schemes.879.profitable-schemes",
        "peekOfCode": "n = 10\nminProfit = 5\ngroup = [2, 3, 5]\nprofit = [6, 7, 8]\ns = Solution()\nprint(s.profitableSchemes(n, minProfit, group, profit))",
        "detail": "879.profitable-schemes.879.profitable-schemes",
        "documentation": {}
    },
    {
        "label": "minProfit",
        "kind": 5,
        "importPath": "879.profitable-schemes.879.profitable-schemes",
        "description": "879.profitable-schemes.879.profitable-schemes",
        "peekOfCode": "minProfit = 5\ngroup = [2, 3, 5]\nprofit = [6, 7, 8]\ns = Solution()\nprint(s.profitableSchemes(n, minProfit, group, profit))",
        "detail": "879.profitable-schemes.879.profitable-schemes",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "879.profitable-schemes.879.profitable-schemes",
        "description": "879.profitable-schemes.879.profitable-schemes",
        "peekOfCode": "group = [2, 3, 5]\nprofit = [6, 7, 8]\ns = Solution()\nprint(s.profitableSchemes(n, minProfit, group, profit))",
        "detail": "879.profitable-schemes.879.profitable-schemes",
        "documentation": {}
    },
    {
        "label": "profit",
        "kind": 5,
        "importPath": "879.profitable-schemes.879.profitable-schemes",
        "description": "879.profitable-schemes.879.profitable-schemes",
        "peekOfCode": "profit = [6, 7, 8]\ns = Solution()\nprint(s.profitableSchemes(n, minProfit, group, profit))",
        "detail": "879.profitable-schemes.879.profitable-schemes",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "879.profitable-schemes.879.profitable-schemes",
        "description": "879.profitable-schemes.879.profitable-schemes",
        "peekOfCode": "s = Solution()\nprint(s.profitableSchemes(n, minProfit, group, profit))",
        "detail": "879.profitable-schemes.879.profitable-schemes",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "881.boats-to-save-people.881.boats-to-save-people",
        "description": "881.boats-to-save-people.881.boats-to-save-people",
        "peekOfCode": "class Solution:\n    def numRescueBoats(self, people: List[int], limit: int) -> int:\n        people.sort()\n        i, j, count=0, len(people)-1, 0\n        while i<=j :\n            if people[i] + people[j] <= limit:\n                i+=1\n            j-=1\n            count+=1\n        return count",
        "detail": "881.boats-to-save-people.881.boats-to-save-people",
        "documentation": {}
    },
    {
        "label": "people",
        "kind": 5,
        "importPath": "881.boats-to-save-people.881.boats-to-save-people",
        "description": "881.boats-to-save-people.881.boats-to-save-people",
        "peekOfCode": "people = [5,1,4,2]\nlimit = 6\ns = Solution()\nprint(s.numRescueBoats(people, limit))",
        "detail": "881.boats-to-save-people.881.boats-to-save-people",
        "documentation": {}
    },
    {
        "label": "limit",
        "kind": 5,
        "importPath": "881.boats-to-save-people.881.boats-to-save-people",
        "description": "881.boats-to-save-people.881.boats-to-save-people",
        "peekOfCode": "limit = 6\ns = Solution()\nprint(s.numRescueBoats(people, limit))",
        "detail": "881.boats-to-save-people.881.boats-to-save-people",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "881.boats-to-save-people.881.boats-to-save-people",
        "description": "881.boats-to-save-people.881.boats-to-save-people",
        "peekOfCode": "s = Solution()\nprint(s.numRescueBoats(people, limit))",
        "detail": "881.boats-to-save-people.881.boats-to-save-people",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "91.decode-ways.91.decode-ways",
        "description": "91.decode-ways.91.decode-ways",
        "peekOfCode": "class Solution:\n    def numDecodings(self, s: str) -> int:\n        if len(s) == 0 or s[0] == \"0\":\n            return 0\n        n = len(s)\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            if s[i - 1] != \"0\":",
        "detail": "91.decode-ways.91.decode-ways",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "912.sort-an-array.912.sort-an-array",
        "description": "912.sort-an-array.912.sort-an-array",
        "peekOfCode": "class Solution:\n    def sortArray(self, nums: List[int]) -> List[int]:\n        nMin = min(nums)\n        nMax = max(nums)\n        return self.quickSort(nums, nMin, nMax)\n# QuickSort\n    def quickSort(self, nums: List[int], nMin: int, nMax: int) -> List[int]:\n        n = len(nums)\n        if n <= 1:\n            return nums",
        "detail": "912.sort-an-array.912.sort-an-array",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "912.sort-an-array.912.sort-an-array",
        "description": "912.sort-an-array.912.sort-an-array",
        "peekOfCode": "nums = [5,1,1,2,0, 0]\ns = Solution()\nprint(s.sortArray(nums))",
        "detail": "912.sort-an-array.912.sort-an-array",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "912.sort-an-array.912.sort-an-array",
        "description": "912.sort-an-array.912.sort-an-array",
        "peekOfCode": "s = Solution()\nprint(s.sortArray(nums))",
        "detail": "912.sort-an-array.912.sort-an-array",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "946.validate-stack-sequences.946.validate-stack-sequences",
        "description": "946.validate-stack-sequences.946.validate-stack-sequences",
        "peekOfCode": "class Solution:\n    def validateStackSequences(self, pushed: List[int], popped: List[int]) -> bool:\n        head = 0\n        stack = []\n        for num in pushed:\n            if num == popped[head]:\n                head += 1\n                while len(stack) and stack[-1] == popped[head]:\n                    stack.pop()\n                    head += 1",
        "detail": "946.validate-stack-sequences.946.validate-stack-sequences",
        "documentation": {}
    },
    {
        "label": "pushed",
        "kind": 5,
        "importPath": "946.validate-stack-sequences.946.validate-stack-sequences",
        "description": "946.validate-stack-sequences.946.validate-stack-sequences",
        "peekOfCode": "pushed = [1, 2, 3, 4, 5]\npopped = [3, 2, 5, 4, 1]\ns = Solution()\nprint(s.validateStackSequences(pushed, popped))",
        "detail": "946.validate-stack-sequences.946.validate-stack-sequences",
        "documentation": {}
    },
    {
        "label": "popped",
        "kind": 5,
        "importPath": "946.validate-stack-sequences.946.validate-stack-sequences",
        "description": "946.validate-stack-sequences.946.validate-stack-sequences",
        "peekOfCode": "popped = [3, 2, 5, 4, 1]\ns = Solution()\nprint(s.validateStackSequences(pushed, popped))",
        "detail": "946.validate-stack-sequences.946.validate-stack-sequences",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "946.validate-stack-sequences.946.validate-stack-sequences",
        "description": "946.validate-stack-sequences.946.validate-stack-sequences",
        "peekOfCode": "s = Solution()\nprint(s.validateStackSequences(pushed, popped))",
        "detail": "946.validate-stack-sequences.946.validate-stack-sequences",
        "documentation": {}
    },
    {
        "label": "TreeNode",
        "kind": 6,
        "importPath": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "description": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "peekOfCode": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\nclass Solution:\n    def isCompleteTree(self, root: Optional[TreeNode]) -> bool:\n        if not root:\n            return True\n        queue = deque([(root, 1)])",
        "detail": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "description": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "peekOfCode": "class Solution:\n    def isCompleteTree(self, root: Optional[TreeNode]) -> bool:\n        if not root:\n            return True\n        queue = deque([(root, 1)])\n        count = 0\n        while queue:\n            node, num = queue.popleft()\n            count += 1\n            if num != count:",
        "detail": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "description": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "peekOfCode": "a = TreeNode(1)\nb = TreeNode(2)\nc = TreeNode(3)\nd = TreeNode(4)\nf = TreeNode(5)\ne = TreeNode(6)\na.left = b\na.right = c\nb.left = d\nb.right = f",
        "detail": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "description": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "peekOfCode": "b = TreeNode(2)\nc = TreeNode(3)\nd = TreeNode(4)\nf = TreeNode(5)\ne = TreeNode(6)\na.left = b\na.right = c\nb.left = d\nb.right = f\n# c.right = e",
        "detail": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "description": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "peekOfCode": "c = TreeNode(3)\nd = TreeNode(4)\nf = TreeNode(5)\ne = TreeNode(6)\na.left = b\na.right = c\nb.left = d\nb.right = f\n# c.right = e\ns = Solution()",
        "detail": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "description": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "peekOfCode": "d = TreeNode(4)\nf = TreeNode(5)\ne = TreeNode(6)\na.left = b\na.right = c\nb.left = d\nb.right = f\n# c.right = e\ns = Solution()\nprint(s.isCompleteTree(a))",
        "detail": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "description": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "peekOfCode": "f = TreeNode(5)\ne = TreeNode(6)\na.left = b\na.right = c\nb.left = d\nb.right = f\n# c.right = e\ns = Solution()\nprint(s.isCompleteTree(a))",
        "detail": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "description": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "peekOfCode": "e = TreeNode(6)\na.left = b\na.right = c\nb.left = d\nb.right = f\n# c.right = e\ns = Solution()\nprint(s.isCompleteTree(a))",
        "detail": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "documentation": {}
    },
    {
        "label": "a.left",
        "kind": 5,
        "importPath": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "description": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "peekOfCode": "a.left = b\na.right = c\nb.left = d\nb.right = f\n# c.right = e\ns = Solution()\nprint(s.isCompleteTree(a))",
        "detail": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "documentation": {}
    },
    {
        "label": "a.right",
        "kind": 5,
        "importPath": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "description": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "peekOfCode": "a.right = c\nb.left = d\nb.right = f\n# c.right = e\ns = Solution()\nprint(s.isCompleteTree(a))",
        "detail": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "documentation": {}
    },
    {
        "label": "b.left",
        "kind": 5,
        "importPath": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "description": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "peekOfCode": "b.left = d\nb.right = f\n# c.right = e\ns = Solution()\nprint(s.isCompleteTree(a))",
        "detail": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "documentation": {}
    },
    {
        "label": "b.right",
        "kind": 5,
        "importPath": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "description": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "peekOfCode": "b.right = f\n# c.right = e\ns = Solution()\nprint(s.isCompleteTree(a))",
        "detail": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "description": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "peekOfCode": "s = Solution()\nprint(s.isCompleteTree(a))",
        "detail": "958.check-completeness-of-a-binary-tree.958.check-completeness-of-a-binary-tree",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "983.minimum-cost-for-tickets.983.minimum-cost-for-tickets",
        "description": "983.minimum-cost-for-tickets.983.minimum-cost-for-tickets",
        "peekOfCode": "class Solution:\n    def mincostTickets(self, days: List[int], costs: List[int]) -> int:\n        n = len(days)\n        dp = [0] * (days[n-1]+1)\n        for i in range(1, days[n-1]+1):\n            if i not in days:\n                dp[i] = dp[i-1]\n            else:\n                dp[i] = min(dp[i-1] + costs[0], dp[max(0, i - 7)] + costs[1], dp[max(0, i - 30)] + costs[2])\n        return dp[days[n-1]]",
        "detail": "983.minimum-cost-for-tickets.983.minimum-cost-for-tickets",
        "documentation": {}
    },
    {
        "label": "days",
        "kind": 5,
        "importPath": "983.minimum-cost-for-tickets.983.minimum-cost-for-tickets",
        "description": "983.minimum-cost-for-tickets.983.minimum-cost-for-tickets",
        "peekOfCode": "days = [1,2,3,4,6,8,9,10,13,14,16,17,19,21,24,26,27,28,29]\ncosts = [3,14,50]\ns = Solution()\nprint(s.mincostTickets(days, costs))",
        "detail": "983.minimum-cost-for-tickets.983.minimum-cost-for-tickets",
        "documentation": {}
    },
    {
        "label": "costs",
        "kind": 5,
        "importPath": "983.minimum-cost-for-tickets.983.minimum-cost-for-tickets",
        "description": "983.minimum-cost-for-tickets.983.minimum-cost-for-tickets",
        "peekOfCode": "costs = [3,14,50]\ns = Solution()\nprint(s.mincostTickets(days, costs))",
        "detail": "983.minimum-cost-for-tickets.983.minimum-cost-for-tickets",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "983.minimum-cost-for-tickets.983.minimum-cost-for-tickets",
        "description": "983.minimum-cost-for-tickets.983.minimum-cost-for-tickets",
        "peekOfCode": "s = Solution()\nprint(s.mincostTickets(days, costs))",
        "detail": "983.minimum-cost-for-tickets.983.minimum-cost-for-tickets",
        "documentation": {}
    }
]